
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 23 14:21:23 CEST 2021
//----------------------------------------------------

import java_cup.runtime.*;
import ctdGenerator.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 23 14:21:23 CEST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\007\000" +
    "\002\002\003\000\002\002\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\014\003\000\002\006" +
    "\003\000\002\057\002\000\002\006\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\006\000\002\005\010\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\050\003\000" +
    "\002\050\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\004\000\002\060\002" +
    "\000\002\020\006\000\002\061\002\000\002\020\006\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\013\006\000\002\013\004\000\002\016" +
    "\004\000\002\016\002\000\002\046\006\000\002\046\004" +
    "\000\002\045\004\000\002\045\002\000\002\010\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\005\000\002" +
    "\056\006\000\002\056\004\000\002\056\002\000\002\012" +
    "\003\000\002\012\005\000\002\051\007\000\002\052\007" +
    "\000\002\053\005\000\002\053\003\000\002\062\002\000" +
    "\002\063\002\000\002\021\012\000\002\022\003\000\002" +
    "\023\004\000\002\023\002\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\031\003" +
    "\000\002\064\002\000\002\065\002\000\002\066\002\000" +
    "\002\025\016\000\002\036\003\000\002\036\005\000\002" +
    "\036\003\000\002\067\002\000\002\070\002\000\002\026" +
    "\013\000\002\071\002\000\002\072\002\000\002\027\013" +
    "\000\002\034\005\000\002\034\003\000\002\034\006\000" +
    "\002\033\003\000\002\032\003\000\002\035\004\000\002" +
    "\035\002\000\002\073\002\000\002\074\002\000\002\030" +
    "\012\000\002\037\003\000\002\037\005\000\002\075\002" +
    "\000\002\076\002\000\002\040\011\000\002\042\003\000" +
    "\002\077\002\000\002\100\002\000\002\041\013\000\002" +
    "\043\003\000\002\101\002\000\002\102\002\000\002\044" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\046\003\027\004\042\005\047\007\016\014" +
    "\025\016\020\024\041\025\051\026\013\027\037\042\023" +
    "\044\021\045\043\046\015\051\052\054\036\055\017\056" +
    "\032\001\002\000\054\002\uffaf\003\uffaf\004\uffaf\005\uffaf" +
    "\007\uffaf\014\uffaf\016\uffaf\017\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\051\uffaf\054\uffaf\055\uffaf\056\uffaf\001\002\000\054\002" +
    "\ufffa\003\ufffa\004\ufffa\005\ufffa\007\ufffa\014\ufffa\016\ufffa" +
    "\017\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\051\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\001\002\000\054\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\007\ufffd\014\ufffd\016\ufffd\017\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\051\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\054" +
    "\002\uffb0\003\uffb0\004\uffb0\005\uffb0\007\uffb0\014\uffb0\016" +
    "\uffb0\017\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\051\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\001\002\000\004\030\327\001\002\000\004" +
    "\014\316\001\002\000\054\002\ufffc\003\ufffc\004\ufffc\005" +
    "\ufffc\007\ufffc\014\ufffc\016\ufffc\017\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\051\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000\004" +
    "\024\305\001\002\000\054\002\ufff8\003\ufff8\004\ufff8\005" +
    "\ufff8\007\ufff8\014\ufff8\016\ufff8\017\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\051\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\006" +
    "\014\uffae\024\uffae\001\002\000\024\004\042\005\047\007" +
    "\016\014\025\024\056\044\021\045\043\055\017\056\032" +
    "\001\002\000\024\004\uffde\005\uffde\007\uffde\014\uffde\024" +
    "\uffde\044\uffde\045\uffde\055\uffde\056\uffde\001\002\000\046" +
    "\003\uff8c\004\uff8c\005\uff8c\007\uff8c\014\uff8c\016\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\042\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\051\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000" +
    "\004\024\275\001\002\000\006\014\211\024\213\001\002" +
    "\000\004\014\uffb5\001\002\000\004\022\210\001\002\000" +
    "\024\004\042\005\047\007\016\014\025\024\056\044\021" +
    "\045\043\055\017\056\032\001\002\000\054\002\ufffb\003" +
    "\ufffb\004\ufffb\005\ufffb\007\ufffb\014\ufffb\016\ufffb\017\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\051\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\054\002\ufff7\003\ufff7\004\ufff7\005\ufff7\007" +
    "\ufff7\014\ufff7\016\ufff7\017\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\051" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000\054\002\uffb1" +
    "\003\uffb1\004\uffb1\005\uffb1\007\uffb1\014\uffb1\016\uffb1\017" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\051\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\001\002\000\054\002\uffb2\003\uffb2\004\uffb2\005\uffb2" +
    "\007\uffb2\014\uffb2\016\uffb2\017\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\051\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002\000\024\004" +
    "\uffdf\005\uffdf\007\uffdf\014\uffdf\024\uffdf\044\uffdf\045\uffdf" +
    "\055\uffdf\056\uffdf\001\002\000\052\002\001\003\001\004" +
    "\001\005\001\007\001\014\001\016\001\017\001\024\001" +
    "\025\001\026\001\027\001\042\001\044\001\045\001\046" +
    "\001\051\001\054\001\055\001\056\001\001\002\000\050" +
    "\002\205\003\027\004\042\005\047\007\016\014\025\016" +
    "\020\024\041\025\051\026\013\027\037\042\023\044\021" +
    "\045\043\046\015\051\052\054\036\055\017\056\032\001" +
    "\002\000\004\022\ufff4\001\002\000\004\014\uff91\001\002" +
    "\000\004\024\160\001\002\000\046\003\uff90\004\uff90\005" +
    "\uff90\007\uff90\014\uff90\016\uff90\024\uff90\025\uff90\026\uff90" +
    "\027\uff90\042\uff90\044\uff90\045\uff90\046\uff90\051\uff90\054" +
    "\uff90\055\uff90\056\uff90\001\002\000\026\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\013\uffec\020\062\022\uffec\030\uffbe\044" +
    "\063\045\064\001\002\000\060\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\013\uffee\015\uffee\017\uffee\021\uffee\022\uffee\023" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\001\002\000\004\024\145\001\002\000\004\022\ufff5" +
    "\001\002\000\004\014\uff94\001\002\000\024\004\ufff1\005" +
    "\ufff1\007\ufff1\014\ufff1\024\ufff1\044\ufff1\045\ufff1\055\ufff1" +
    "\056\ufff1\001\002\000\060\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\013\uffed\015\uffed\017\uffed\021\uffed\022\uffed\023\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\001\002\000\016\006\067\007\071\010\070\011\072\013" +
    "\066\022\ufff6\001\002\000\004\014\054\001\002\000\046" +
    "\003\uff8d\004\uff8d\005\uff8d\007\uff8d\014\uff8d\016\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\042\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\051\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002\000" +
    "\060\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\015\ufff2" +
    "\017\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000\024\004" +
    "\042\005\047\007\016\014\025\024\056\044\021\045\043" +
    "\055\017\056\032\001\002\000\016\006\067\007\071\010" +
    "\070\011\072\013\066\015\ufff3\001\002\000\066\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\013\uffec\015\uffec\017\uffec\020" +
    "\062\021\uffec\022\uffec\023\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\044\063\045" +
    "\064\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\001\002" +
    "\000\004\015\060\001\002\000\004\022\061\001\002\000" +
    "\054\002\ufff9\003\ufff9\004\ufff9\005\ufff9\007\ufff9\014\ufff9" +
    "\016\ufff9\017\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\001\002\000\024\004\042\005\047\007" +
    "\016\014\025\024\056\044\021\045\043\055\017\056\032" +
    "\001\002\000\060\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013" +
    "\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002" +
    "\000\060\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\015" +
    "\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\016" +
    "\006\067\007\071\010\070\011\072\013\066\021\073\001" +
    "\002\000\024\004\042\005\047\007\016\014\025\024\056" +
    "\044\021\045\043\055\017\056\032\001\002\000\024\004" +
    "\042\005\047\007\016\014\025\024\056\044\021\045\043" +
    "\055\017\056\032\001\002\000\024\004\042\005\047\007" +
    "\016\014\025\024\056\044\021\045\043\055\017\056\032" +
    "\001\002\000\024\004\042\005\047\007\016\014\025\024" +
    "\056\044\021\045\043\055\017\056\032\001\002\000\024" +
    "\004\042\005\047\007\016\014\025\024\056\044\021\045" +
    "\043\055\017\056\032\001\002\000\062\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\013\uffeb\015\uffeb\017\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\030\074\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\001\002\000\024\004\042\005\047" +
    "\007\016\014\025\024\056\044\021\045\043\055\017\056" +
    "\032\001\002\000\060\006\067\007\071\010\070\011\072" +
    "\013\066\015\uffea\017\uffea\021\uffea\022\uffea\023\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001" +
    "\002\000\060\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2" +
    "\015\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\001\002\000" +
    "\060\006\uffe4\007\uffe4\010\070\011\072\013\066\015\uffe4" +
    "\017\uffe4\021\uffe4\022\uffe4\023\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000\060\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\015\uffe3\017\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\001\002\000\060\006\uffe5\007" +
    "\uffe5\010\070\011\072\013\066\015\uffe5\017\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\001\002\000\060\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\013\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\001\002\000\024\004\042\005\047\007\016\014" +
    "\025\024\056\044\021\045\043\055\017\056\032\001\002" +
    "\000\060\006\067\007\071\010\070\011\072\013\066\015" +
    "\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\004" +
    "\014\106\001\002\000\026\004\042\005\047\007\016\014" +
    "\111\024\056\041\112\044\021\045\043\055\017\056\032" +
    "\001\002\000\010\015\uff93\037\115\040\114\001\002\000" +
    "\030\006\067\007\071\010\070\011\072\013\066\031\132" +
    "\032\126\033\127\034\124\035\125\036\131\001\002\000" +
    "\026\004\042\005\047\007\016\014\111\024\056\041\112" +
    "\044\021\045\043\055\017\056\032\001\002\000\026\004" +
    "\042\005\047\007\016\014\111\024\056\041\112\044\021" +
    "\045\043\055\017\056\032\001\002\000\012\015\uffd6\022" +
    "\uffd6\037\115\040\114\001\002\000\026\004\uffd5\005\uffd5" +
    "\007\uffd5\014\uffd5\024\uffd5\041\uffd5\044\uffd5\045\uffd5\055" +
    "\uffd5\056\uffd5\001\002\000\026\004\uffd3\005\uffd3\007\uffd3" +
    "\014\uffd3\024\uffd3\041\uffd3\044\uffd3\045\uffd3\055\uffd3\056" +
    "\uffd3\001\002\000\026\004\042\005\047\007\016\014\111" +
    "\024\056\041\112\044\021\045\043\055\017\056\032\001" +
    "\002\000\012\015\uffd2\022\uffd2\037\uffd2\040\114\001\002" +
    "\000\026\004\042\005\047\007\016\014\111\024\056\041" +
    "\112\044\021\045\043\055\017\056\032\001\002\000\012" +
    "\015\uffd4\022\uffd4\037\uffd4\040\uffd4\001\002\000\010\015" +
    "\141\037\115\040\114\001\002\000\032\006\067\007\071" +
    "\010\070\011\072\013\066\015\130\031\132\032\126\033" +
    "\127\034\124\035\125\036\131\001\002\000\024\004\042" +
    "\005\047\007\016\014\025\024\056\044\021\045\043\055" +
    "\017\056\032\001\002\000\024\004\042\005\047\007\016" +
    "\014\025\024\056\044\021\045\043\055\017\056\032\001" +
    "\002\000\024\004\042\005\047\007\016\014\025\024\056" +
    "\044\021\045\043\055\017\056\032\001\002\000\024\004" +
    "\042\005\047\007\016\014\025\024\056\044\021\045\043" +
    "\055\017\056\032\001\002\000\060\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\013\uffef\015\uffef\017\uffef\021\uffef\022\uffef" +
    "\023\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\001\002\000\024\004\042\005\047\007\016\014" +
    "\025\024\056\044\021\045\043\055\017\056\032\001\002" +
    "\000\024\004\042\005\047\007\016\014\025\024\056\044" +
    "\021\045\043\055\017\056\032\001\002\000\024\006\067" +
    "\007\071\010\070\011\072\013\066\015\uffda\022\uffda\037" +
    "\uffda\040\uffda\001\002\000\024\006\067\007\071\010\070" +
    "\011\072\013\066\015\uffdb\022\uffdb\037\uffdb\040\uffdb\001" +
    "\002\000\024\006\067\007\071\010\070\011\072\013\066" +
    "\015\uffd8\022\uffd8\037\uffd8\040\uffd8\001\002\000\024\006" +
    "\067\007\071\010\070\011\072\013\066\015\uffd9\022\uffd9" +
    "\037\uffd9\040\uffd9\001\002\000\024\006\067\007\071\010" +
    "\070\011\072\013\066\015\uffdc\022\uffdc\037\uffdc\040\uffdc" +
    "\001\002\000\024\006\067\007\071\010\070\011\072\013" +
    "\066\015\uffd7\022\uffd7\037\uffd7\040\uffd7\001\002\000\012" +
    "\015\uffdd\022\uffdd\037\uffdd\040\uffdd\001\002\000\004\015" +
    "\143\001\002\000\046\003\027\004\042\005\047\007\016" +
    "\014\025\016\020\024\041\025\051\026\013\027\037\042" +
    "\023\044\021\045\043\046\015\051\052\054\036\055\017" +
    "\056\032\001\002\000\054\002\uff92\003\uff92\004\uff92\005" +
    "\uff92\007\uff92\014\uff92\016\uff92\017\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\051\uff92\054\uff92\055\uff92\056\uff92\001\002\000\060" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\015\uffe8\017" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002\000\046\003\027" +
    "\004\042\005\047\007\016\014\025\016\020\024\041\025" +
    "\051\026\013\027\037\042\023\044\021\045\043\046\015" +
    "\051\052\054\036\055\017\056\032\001\002\000\004\054" +
    "\150\001\002\000\004\014\151\001\002\000\026\004\042" +
    "\005\047\007\016\014\111\024\056\041\112\044\021\045" +
    "\043\055\017\056\032\001\002\000\010\015\uff8f\037\115" +
    "\040\114\001\002\000\004\015\154\001\002\000\004\022" +
    "\155\001\002\000\054\002\uff8e\003\uff8e\004\uff8e\005\uff8e" +
    "\007\uff8e\014\uff8e\016\uff8e\017\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\051\uff8e\054\uff8e\055\uff8e\056\uff8e\001\002\000\006\022" +
    "\uffcf\023\200\001\002\000\004\022\uffce\001\002\000\012" +
    "\020\161\022\uffc6\023\uffc6\030\163\001\002\000\004\004" +
    "\165\001\002\000\006\022\uffc8\023\uffc8\001\002\000\024" +
    "\004\042\005\047\007\016\014\025\024\056\044\021\045" +
    "\043\055\017\056\032\001\002\000\020\006\067\007\071" +
    "\010\070\011\072\013\066\022\uffc7\023\uffc7\001\002\000" +
    "\004\021\166\001\002\000\006\022\uffbf\030\170\001\002" +
    "\000\004\022\uffbb\001\002\000\006\016\171\024\172\001" +
    "\002\000\024\004\042\005\047\007\016\014\025\024\056" +
    "\044\021\045\043\055\017\056\032\001\002\000\006\015" +
    "\uffc0\022\uffc0\001\002\000\020\006\067\007\071\010\070" +
    "\011\072\013\066\017\uffb9\023\uffb9\001\002\000\006\017" +
    "\176\023\175\001\002\000\024\004\042\005\047\007\016" +
    "\014\025\024\056\044\021\045\043\055\017\056\032\001" +
    "\002\000\006\015\uffc1\022\uffc1\001\002\000\020\006\067" +
    "\007\071\010\070\011\072\013\066\017\uffba\023\uffba\001" +
    "\002\000\004\024\201\001\002\000\010\022\uffca\023\uffca" +
    "\030\203\001\002\000\006\022\uffc9\023\uffc9\001\002\000" +
    "\024\004\042\005\047\007\016\014\025\024\056\044\021" +
    "\045\043\055\017\056\032\001\002\000\020\006\067\007" +
    "\071\010\070\011\072\013\066\022\uffcb\023\uffcb\001\002" +
    "\000\004\002\000\001\002\000\052\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\007\uffff\014\uffff\016\uffff\017\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\042\uffff\044\uffff\045\uffff\046" +
    "\uffff\051\uffff\054\uffff\055\uffff\056\uffff\001\002\000\016" +
    "\006\067\007\071\010\070\011\072\013\066\015\130\001" +
    "\002\000\054\002\ufffe\003\ufffe\004\ufffe\005\ufffe\007\ufffe" +
    "\014\ufffe\016\ufffe\017\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\051\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\001\002\000\004\024\213\001" +
    "\002\000\010\047\221\050\225\053\222\001\002\000\016" +
    "\020\214\022\uff9f\030\215\047\uff9f\050\uff9f\053\uff9f\001" +
    "\002\000\024\004\042\005\047\007\016\014\025\024\056" +
    "\044\021\045\043\055\017\056\032\001\002\000\024\004" +
    "\042\005\047\007\016\014\025\024\056\044\021\045\043" +
    "\055\017\056\032\001\002\000\024\006\067\007\071\010" +
    "\070\011\072\013\066\022\uffa0\047\uffa0\050\uffa0\053\uffa0" +
    "\001\002\000\016\006\067\007\071\010\070\011\072\013" +
    "\066\021\220\001\002\000\012\022\uff9e\047\uff9e\050\uff9e" +
    "\053\uff9e\001\002\000\024\004\uff9d\005\uff9d\007\uff9d\014" +
    "\uff9d\024\uff9d\044\uff9d\045\uff9d\055\uff9d\056\uff9d\001\002" +
    "\000\006\016\244\024\246\001\002\000\024\004\042\005" +
    "\047\007\016\014\025\024\056\044\021\045\043\055\017" +
    "\056\032\001\002\000\024\004\042\005\047\007\016\014" +
    "\025\024\056\044\021\045\043\055\017\056\032\001\002" +
    "\000\024\004\uff9c\005\uff9c\007\uff9c\014\uff9c\024\uff9c\044" +
    "\uff9c\045\uff9c\055\uff9c\056\uff9c\001\002\000\020\006\067" +
    "\007\071\010\070\011\072\013\066\051\uffa3\052\uffa3\001" +
    "\002\000\006\051\uff9a\052\230\001\002\000\024\004\042" +
    "\005\047\007\016\014\025\024\056\044\021\045\043\055" +
    "\017\056\032\001\002\000\004\051\232\001\002\000\046" +
    "\003\uffa2\004\uffa2\005\uffa2\007\uffa2\014\uffa2\016\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\042\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\051\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002\000" +
    "\046\003\027\004\042\005\047\007\016\014\025\016\020" +
    "\024\041\025\051\026\013\027\037\042\023\044\021\045" +
    "\043\046\015\051\052\054\036\055\017\056\032\001\002" +
    "\000\054\002\uffa1\003\uffa1\004\uffa1\005\uffa1\007\uffa1\014" +
    "\uffa1\016\uffa1\017\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\051\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\001\002\000\016\006\067\007\071" +
    "\010\070\011\072\013\066\051\uff9b\001\002\000\020\006" +
    "\067\007\071\010\070\011\072\013\066\051\uffa6\052\uffa6" +
    "\001\002\000\006\051\uff9a\052\230\001\002\000\004\051" +
    "\241\001\002\000\046\003\uffa5\004\uffa5\005\uffa5\007\uffa5" +
    "\014\uffa5\016\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\042" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\051\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\001\002\000\046\003\027\004\042\005\047\007" +
    "\016\014\025\016\020\024\041\025\051\026\013\027\037" +
    "\042\023\044\021\045\043\046\015\051\052\054\036\055" +
    "\017\056\032\001\002\000\054\002\uffa4\003\uffa4\004\uffa4" +
    "\005\uffa4\007\uffa4\014\uffa4\016\uffa4\017\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\051\uffa4\054\uffa4\055\uffa4\056\uffa4\001\002\000" +
    "\024\004\042\005\047\007\016\014\025\024\056\044\021" +
    "\045\043\055\017\056\032\001\002\000\004\051\uff99\001" +
    "\002\000\004\051\uff96\001\002\000\004\051\250\001\002" +
    "\000\046\003\uff98\004\uff98\005\uff98\007\uff98\014\uff98\016" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\042\uff98\044\uff98" +
    "\045\uff98\046\uff98\051\uff98\054\uff98\055\uff98\056\uff98\001" +
    "\002\000\046\003\027\004\042\005\047\007\016\014\025" +
    "\016\020\024\041\025\051\026\013\027\037\042\023\044" +
    "\021\045\043\046\015\051\052\054\036\055\017\056\032" +
    "\001\002\000\054\002\uff97\003\uff97\004\uff97\005\uff97\007" +
    "\uff97\014\uff97\016\uff97\017\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\051" +
    "\uff97\054\uff97\055\uff97\056\uff97\001\002\000\006\017\254" +
    "\023\175\001\002\000\004\051\uff95\001\002\000\004\022" +
    "\256\001\002\000\026\004\uffad\005\uffad\007\uffad\014\uffad" +
    "\024\uffad\041\uffad\044\uffad\045\uffad\055\uffad\056\uffad\001" +
    "\002\000\026\004\042\005\047\007\016\014\111\024\056" +
    "\041\112\044\021\045\043\055\017\056\032\001\002\000" +
    "\010\022\261\037\115\040\114\001\002\000\024\004\uffac" +
    "\005\uffac\007\uffac\014\uffac\024\uffac\044\uffac\045\uffac\055" +
    "\uffac\056\uffac\001\002\000\024\004\042\005\047\007\016" +
    "\014\025\024\266\044\021\045\043\055\017\056\032\001" +
    "\002\000\016\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2" +
    "\015\uffa9\001\002\000\004\015\uffa7\001\002\000\014\006" +
    "\067\007\071\010\070\011\072\013\066\001\002\000\026" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\015\uffec\020" +
    "\062\030\uffbe\044\063\045\064\001\002\000\004\015\270" +
    "\001\002\000\046\003\uffab\004\uffab\005\uffab\007\uffab\014" +
    "\uffab\016\uffab\024\uffab\025\uffab\026\uffab\027\uffab\042\uffab" +
    "\044\uffab\045\uffab\046\uffab\051\uffab\054\uffab\055\uffab\056" +
    "\uffab\001\002\000\046\003\027\004\042\005\047\007\016" +
    "\014\025\016\020\024\041\025\051\026\013\027\037\042" +
    "\023\044\021\045\043\046\015\051\052\054\036\055\017" +
    "\056\032\001\002\000\054\002\uffaa\003\uffaa\004\uffaa\005" +
    "\uffaa\007\uffaa\014\uffaa\016\uffaa\017\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\051\uffaa\054\uffaa\055\uffaa\056\uffaa\001\002\000\024" +
    "\004\042\005\047\007\016\014\025\024\056\044\021\045" +
    "\043\055\017\056\032\001\002\000\016\006\067\007\071" +
    "\010\070\011\072\013\066\015\uffa8\001\002\000\060\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\015\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\001\002\000\046\003\027\004" +
    "\042\005\047\007\016\014\025\016\020\024\041\025\051" +
    "\026\013\027\037\042\023\044\021\045\043\046\015\051" +
    "\052\054\036\055\017\056\032\001\002\000\050\003\027" +
    "\004\042\005\047\007\016\014\025\016\020\017\uff8b\024" +
    "\041\025\051\026\013\027\037\042\023\044\021\045\043" +
    "\046\015\051\052\054\036\055\017\056\032\001\002\000" +
    "\004\017\301\001\002\000\054\002\uff8a\003\uff8a\004\uff8a" +
    "\005\uff8a\007\uff8a\014\uff8a\016\uff8a\017\uff8a\024\uff8a\025" +
    "\uff8a\026\uff8a\027\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a" +
    "\046\uff8a\051\uff8a\054\uff8a\055\uff8a\056\uff8a\001\002\000" +
    "\060\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\015\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\023\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\006\022" +
    "\uffd1\023\313\001\002\000\004\022\uffd0\001\002\000\012" +
    "\020\307\022\uffca\023\uffca\030\203\001\002\000\006\022" +
    "\uffcc\023\uffcc\001\002\000\004\004\310\001\002\000\004" +
    "\021\311\001\002\000\006\022\uffbf\030\170\001\002\000" +
    "\004\022\uffbc\001\002\000\004\024\314\001\002\000\010" +
    "\022\uffca\023\uffca\030\203\001\002\000\006\022\uffcd\023" +
    "\uffcd\001\002\000\026\004\042\005\047\007\016\014\111" +
    "\024\056\041\112\044\021\045\043\055\017\056\032\001" +
    "\002\000\010\015\320\037\115\040\114\001\002\000\046" +
    "\003\uffb8\004\uffb8\005\uffb8\007\uffb8\014\uffb8\016\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\042\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000" +
    "\046\003\027\004\042\005\047\007\016\014\025\016\020" +
    "\024\041\025\051\026\013\027\037\042\023\044\021\045" +
    "\043\046\015\051\052\054\036\055\017\056\032\001\002" +
    "\000\054\002\uffb7\003\uffb7\004\uffb7\005\uffb7\007\uffb7\014" +
    "\uffb7\016\uffb7\017\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\051\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\001\002\000\054\002\uffb3\003\uffb3" +
    "\004\uffb3\005\uffb3\007\uffb3\014\uffb3\016\uffb3\017\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\042\uffb3\043\324\044\uffb3" +
    "\045\uffb3\046\uffb3\051\uffb3\054\uffb3\055\uffb3\056\uffb3\001" +
    "\002\000\046\003\027\004\042\005\047\007\016\014\025" +
    "\016\020\024\041\025\051\026\013\027\037\042\023\044" +
    "\021\045\043\046\015\051\052\054\036\055\017\056\032" +
    "\001\002\000\054\002\uffb6\003\uffb6\004\uffb6\005\uffb6\007" +
    "\uffb6\014\uffb6\016\uffb6\017\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\051" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\001\002\000\054\002\uffb4" +
    "\003\uffb4\004\uffb4\005\uffb4\007\uffb4\014\uffb4\016\uffb4\017" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\051\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\001\002\000\034\004\042\005\047\007\016\014\025" +
    "\015\uffbf\016\334\022\uffbf\024\333\030\170\044\021\045" +
    "\043\055\017\056\032\001\002\000\006\015\uffc4\022\uffc4" +
    "\001\002\000\006\015\uffc5\022\uffc5\001\002\000\020\006" +
    "\067\007\071\010\070\011\072\013\066\015\uffc3\022\uffc3" +
    "\001\002\000\030\006\uffec\007\uffec\010\uffec\011\uffec\013" +
    "\uffec\015\uffec\020\062\022\uffec\030\uffbd\044\063\045\064" +
    "\001\002\000\024\004\042\005\047\007\016\014\025\024" +
    "\056\044\021\045\043\055\017\056\032\001\002\000\006" +
    "\017\336\023\175\001\002\000\006\015\uffc2\022\uffc2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\056\002\032\003\033\004\023\005\052\006" +
    "\047\007\043\010\034\012\007\021\005\022\010\024\011" +
    "\025\006\026\030\027\027\030\003\031\021\040\025\041" +
    "\004\042\044\043\037\044\013\050\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\302\051\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\052\006\301\050\045\001\001" +
    "\000\002\001\001\000\004\101\275\001\001\000\002\001" +
    "\001\000\004\034\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\052\006\206\050\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\002" +
    "\205\004\023\005\052\006\047\007\043\010\034\012\007" +
    "\021\005\022\010\024\011\025\006\026\030\027\027\030" +
    "\003\031\021\040\025\041\004\042\044\043\037\044\013" +
    "\050\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\155\052\156\001\001\000\004\077\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\104\001\001\000\004\057\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\052" +
    "\006\054\014\056\050\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\052\006\064\050\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\052\006\101\050\045\001\001\000\010\005\052\006" +
    "\100\050\045\001\001\000\010\005\052\006\077\050\045" +
    "\001\001\000\010\005\052\006\076\050\045\001\001\000" +
    "\010\005\052\006\075\050\045\001\001\000\002\001\001" +
    "\000\010\005\052\006\074\050\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\052\006" +
    "\103\050\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\052\006\107\020\106\050\045\001\001\000" +
    "\004\076\141\001\001\000\002\001\001\000\012\005\052" +
    "\006\122\020\121\050\045\001\001\000\012\005\052\006" +
    "\107\020\112\050\045\001\001\000\002\001\001\000\004" +
    "\060\117\001\001\000\004\061\115\001\001\000\012\005" +
    "\052\006\107\020\116\050\045\001\001\000\002\001\001" +
    "\000\012\005\052\006\107\020\120\050\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\052\006\137\050\045\001\001\000\010\005\052\006" +
    "\136\050\045\001\001\000\010\005\052\006\135\050\045" +
    "\001\001\000\010\005\052\006\134\050\045\001\001\000" +
    "\002\001\001\000\010\005\052\006\133\050\045\001\001" +
    "\000\010\005\052\006\132\050\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\002\143\004\023\005\052\006\047" +
    "\007\043\010\034\012\007\021\005\022\010\024\011\025" +
    "\006\026\030\027\027\030\003\031\021\040\025\041\004" +
    "\042\044\043\037\044\013\050\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\002\146\004\023\005\052" +
    "\006\047\007\043\010\034\012\007\021\005\022\010\024" +
    "\011\025\006\026\030\027\027\030\003\031\021\040\025" +
    "\041\004\042\044\043\037\044\013\050\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\052\006\107" +
    "\020\151\050\045\001\001\000\004\100\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\052\006\163" +
    "\050\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\052\006\172\050\045\053\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\052\006\176\050\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\201\001\001" +
    "\000\002\001\001\000\010\005\052\006\203\050\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\254\001" +
    "\001\000\006\032\223\033\222\001\001\000\002\001\001" +
    "\000\010\005\052\006\216\050\045\001\001\000\010\005" +
    "\052\006\215\050\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\244\001\001\000\010\005\052\006\235\050\045\001\001" +
    "\000\010\005\052\006\225\050\045\001\001\000\002\001" +
    "\001\000\004\071\226\001\001\000\004\035\230\001\001" +
    "\000\010\005\052\006\234\050\045\001\001\000\002\001" +
    "\001\000\004\072\232\001\001\000\054\002\233\004\023" +
    "\005\052\006\047\007\043\010\034\012\007\021\005\022" +
    "\010\024\011\025\006\026\030\027\027\030\003\031\021" +
    "\040\025\041\004\042\044\043\037\044\013\050\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\236" +
    "\001\001\000\004\035\237\001\001\000\002\001\001\000" +
    "\004\070\241\001\001\000\054\002\242\004\023\005\052" +
    "\006\047\007\043\010\034\012\007\021\005\022\010\024" +
    "\011\025\006\026\030\027\027\030\003\031\021\040\025" +
    "\041\004\042\044\043\037\044\013\050\045\001\001\000" +
    "\002\001\001\000\012\005\052\006\172\050\045\053\252" +
    "\001\001\000\004\073\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\250\001\001\000\054\002\251" +
    "\004\023\005\052\006\047\007\043\010\034\012\007\021" +
    "\005\022\010\024\011\025\006\026\030\027\027\030\003" +
    "\031\021\040\025\041\004\042\044\043\037\044\013\050" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\256\001\001\000" +
    "\012\005\052\006\107\020\257\050\045\001\001\000\002" +
    "\001\001\000\004\065\261\001\001\000\016\005\262\006" +
    "\264\010\263\012\007\036\266\050\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\270\001\001\000\054" +
    "\002\271\004\023\005\052\006\047\007\043\010\034\012" +
    "\007\021\005\022\010\024\011\025\006\026\030\027\027" +
    "\030\003\031\021\040\025\041\004\042\044\043\037\044" +
    "\013\050\045\001\001\000\002\001\001\000\010\005\052" +
    "\006\273\050\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\002\032\003\276\004\023\005\052\006\047" +
    "\007\043\010\034\012\007\021\005\022\010\024\011\025" +
    "\006\026\030\027\027\030\003\031\021\040\025\041\004" +
    "\042\044\043\037\044\013\050\045\001\001\000\056\002" +
    "\205\004\023\005\052\006\047\007\043\010\034\012\007" +
    "\021\005\022\010\024\011\025\006\026\030\027\027\030" +
    "\003\031\021\040\025\041\004\042\044\043\037\044\013" +
    "\050\045\102\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\314\001\001\000" +
    "\002\001\001\000\012\005\052\006\107\020\316\050\045" +
    "\001\001\000\002\001\001\000\004\062\320\001\001\000" +
    "\054\002\321\004\023\005\052\006\047\007\043\010\034" +
    "\012\007\021\005\022\010\024\011\025\006\026\030\027" +
    "\027\030\003\031\021\040\025\041\004\042\044\043\037" +
    "\044\013\050\045\001\001\000\004\063\322\001\001\000" +
    "\004\023\324\001\001\000\054\002\325\004\023\005\052" +
    "\006\047\007\043\010\034\012\007\021\005\022\010\024" +
    "\011\025\006\026\030\027\027\030\003\031\021\040\025" +
    "\041\004\042\044\043\037\044\013\050\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\052\006\331" +
    "\017\330\050\045\056\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\052\006\172\050\045\053\334\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
		Global.error("syntax error");
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    boolean isCasting = false;
    String castingType = null;

    List<String> cast_list = new ArrayList<>();

    public String get_curret_cast(){
        if (cast_list.size() == 0){
            return null;
        }
        return cast_list.get(cast_list.size()-1);
    }

    public void remove_curret_cast(){
        cast_list.remove(cast_list.size()-1);
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // block ::= OCB NT$18 list_sentences NT$19 CCB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 TS.deleteBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$18 ::= 
            {
              Object RESULT =null;
 TS.newBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // do_head ::= DO 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_head",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // do_while_sentence ::= do_head NT$16 sentence WHILE OB condition NT$17 CB PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_sentence",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(c.true_label()); 
                                             Global.gotoLabel(d);   
                                             Global.label(c.false_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$16 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(d);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // while_head ::= WHILE 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_head",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_sentence ::= while_head NT$14 OB condition NT$15 CB sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Global.gotoLabel(w); Global.label(c.false_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_sentence",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$14 ::= 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(w);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // array_for_val ::= OCB array_init_declaration CCB 
            {
              Var RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List ar = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (!VarDeclaration.same_array_type(ar)){
            Global.error("array no valido (distintos tipos)");
        }

        String type = VarDeclaration.type_of(ar.get(0));
        String temp = TS.newTempVar();
        ForInLoop.init_array_declaration(temp, ar);
        RESULT = new Var(temp, type, ar);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_for_val",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // array_for_val ::= VAR_NAME 
            {
              Var RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Var v = TS.getVar(n);
        if (v==null){
            Global.error("variable no declarada");
        }
        if (!v.getType().equals(Global.ARRAY)){
            Global.error("la variable '" + n + "' no es un array");
        }
        Array ar = (Array)v.getValue();
        RESULT = new Var(v.getName(), ar.getType(), ar.getList());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_for_val",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_in_sent ::= for_head loop_var IN array_for_val NT$12 DO NT$13 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Var array = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                ForInLoop fi = (ForInLoop)RESULT;
                fi.end_body();
                fi.exit_label();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_in_sent",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var array = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                ForInLoop fi = (ForInLoop)RESULT;
                fi.init_body();
                RESULT = fi;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$12 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var array = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                ForInLoop fi = new ForInLoop(f, array, l);
                RESULT = fi;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // step_part ::= 
            {
              Expression RESULT =null;
		  RESULT = new Expression(Global.INTEGER, new Integer(1));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step_part",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // step_part ::= STEP exp 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step_part",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // down_label ::= DOWNTO 
            {
              String RESULT =null;
		  RESULT = TS.newLabel();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("down_label",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // to_label ::= TO 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("to_label",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // loop_var ::= VAR_NAME OCC exp CCC 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String index = i.getValue().toString();
        RESULT = VarDeclaration.get_array_index_value_for_in(n, index);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // loop_var ::= VAR_NAME 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Var v = TS.getVar(n);
        if (v==null){
            Global.error("variable no declarada");
        }
        RESULT = new Expression (v.getType(), v.getName());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // loop_var ::= VAR_NAME ASIG exp 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      
        String name = VarDeclaration.intVarInicialization(n, e);
        RESULT = new Expression(e.getType(), name);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_down_sent ::= for_head loop_var down_label exp NT$10 step_part DO NT$11 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Global.gotoLabel(d);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.false_label());
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_down_sent",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 ForLoop.loop_var(v, Global.MINUS, s); Global.gotoLabel(f);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$10 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Global.label(f); RESULT = Operation.condition(v, Global.GE, e2); 
                                                               Global.label(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_to_sent ::= for_head loop_var to_label exp NT$8 step_part DO NT$9 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Global.gotoLabel(t);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.false_label());
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_to_sent",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 ForLoop.loop_var(v, Global.PLUS,s); Global.gotoLabel(f);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$8 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Global.label(f); RESULT = Operation.condition(v, Global.LE, e2); 
                                                               Global.label(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // increment_part ::= var_inicialization 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = (Expression)v;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // increment_part ::= VAR_NAME ASIG exp 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   VarDeclaration.varValAct(n, e); RESULT = new Expression(e.getType(), n);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // increment_part ::= numeric_expression 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_loop ::= for_head OB loop_var PYC NT$5 condition PYC NT$6 increment_part CB NT$7 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Global.gotoLabel(RESULT.toString()); Global.label(c.false_label());    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Global.gotoLabel(f); Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = TS.newLabel(); Global.label(RESULT.toString());     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$5 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Global.label(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_head ::= FOR 
            {
              String RESULT =null;
		 RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_sentence ::= for_in_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_sentence",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_sentence ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_sentence",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_sentence ::= for_down_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_sentence",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_sentence ::= for_to_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_sentence",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else_if_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_part",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_if_part ::= ELSE sentence 
            {
              Object RESULT =null;
		 String lab = TS.newLabel(); Global.label(lab);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_part",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_head ::= IF 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_head",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_sentence ::= if_head OB condition CB NT$3 sentence NT$4 else_if_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  Global.label(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_sentence",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
  Global.gotoLabel(i); Global.label(c.false_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Global.label(c.true_label());    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // array_init_declaration ::= exp 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List res = new ArrayList<>();
        res.add(e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_init_declaration",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // array_init_declaration ::= array_init_declaration COMMA exp 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List res = new ArrayList<>();
        res.addAll(a);
        res.add(e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_init_declaration",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // float_array_declaration ::= VAR_NAME OCC INT_NUM CCC array_value_part 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List v = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        Integer in = Integer.parseInt(i);
        int size = in.intValue();
        if (v.size() < 0 || (v.size()< size && v.size() > size)){
            Global.error("la longitud no coincide en la declaracion");
        }       
        Array array = new Array(v, i, Global.FLOAT);
        VarDeclaration.array_inicialization(n, array, Global.ARRAY, false);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_array_declaration",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // int_array_declaration ::= VAR_NAME OCC INT_NUM CCC array_value_part 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List v = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        Integer in = Integer.parseInt(i);
        int size = in.intValue();
        if (v.size() < 0 || (v.size()< size && v.size() > size)){
            Global.error("la longitud no coincide en la declaracion");
        }       
        Array array = new Array(v, i, Global.INTEGER);
        VarDeclaration.array_inicialization(n, array, Global.ARRAY, false);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_array_declaration",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vars_ini_array ::= vars_ini_array ASIG VAR_NAME 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<String> l = new ArrayList<>();
        l.add(n);
        l.addAll(v);
        RESULT = l;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_ini_array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // vars_ini_array ::= VAR_NAME 
            {
              List<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
        List<String> l = new ArrayList<>(); 
        l.add(n); 
        RESULT = l; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_ini_array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // array_value_part ::= 
            {
              List RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_value_part",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // array_value_part ::= ASIG VAR_NAME 
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Var v = TS.getVar(n);
        if (v==null){
            Global.error("variable no declarada");
        }
        if (!v.getType().equals(Global.ARRAY)){
            Global.error("la variable no es un array");
        }
        Array ar = (Array)v.getValue();
        RESULT = (List)ar.getList();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_value_part",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // array_value_part ::= ASIG OCB array_init_declaration CCB 
            {
              List RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List ar = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = ar;              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_value_part",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inicialization_part ::= OCB array_init_declaration CCB 
            {
              Expression RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List ar = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Expression (Global.LIST, ar);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicialization_part",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inicialization_part ::= exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if (e.getType().equals(Global.ARRAY)){
            String varName = e.getValue().toString();
            Var v = TS.getVar(varName);
            if (v==null){
                Global.error("variable '" + varName + "' no declarada");
            }
            Array a = (Array)v.getValue();
            RESULT = new Expression(Global.LIST, a.getList()); 
        }else{
            RESULT = e;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicialization_part",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inicialization_part ::= array_value_part 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(Global.LIST, l);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicialization_part",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_inicialization ::= vars_ini_array ASIG inicialization_part 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if (e.getType().equals(Global.LIST)){
            VarDeclaration.multipleAsigArrayVar(l, (List)e.getValue());
        }else {
            VarDeclaration.multipleAsigValueVar(l, e); 
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inicialization",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // float_part ::= 
            {
              Expression RESULT =null;
		 RESULT = new Expression(Global.FLOAT, new Float(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_part",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // float_part ::= ASIG exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_part",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // float_var_list_declaration ::= VAR_NAME float_part 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("#DECLARACIÓN: " + n + " = " + e.getValue());
        VarDeclaration.var_declaration(n, e, Global.FLOAT);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_var_list_declaration",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // float_var_list_declaration ::= float_var_list_declaration COMMA VAR_NAME value_part 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
       System.out.println("#DECLARACIÓN: " + n + " = " + e.getValue());
       VarDeclaration.var_declaration(n, e, Global.FLOAT);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_var_list_declaration",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value_part ::= 
            {
              Expression RESULT =null;
		 RESULT = new Expression(Global.INTEGER, new Integer(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_part",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value_part ::= ASIG exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_part",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // int_var_list_declaration ::= VAR_NAME value_part 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("#DECLARACIÓN: " + n + " = " + e.getValue());
        VarDeclaration.var_declaration(n, e, Global.INTEGER);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_var_list_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // int_var_list_declaration ::= int_var_list_declaration COMMA VAR_NAME value_part 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
        System.out.println("#DECLARACIÓN: " + n + " = " + e.getValue());
       VarDeclaration.var_declaration(n, e, Global.INTEGER);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_var_list_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_declaration ::= FLOAT float_array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_declaration ::= FLOAT float_var_list_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_declaration ::= INT int_array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_declaration ::= INT int_var_list_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condition ::= condition OR NT$2 condition 
            {
              Condition RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Operation.booleanOperator(c1, Global.OR, c2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$2 ::= 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  System.out.println(c1.false_label() + ":");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condition ::= condition AND NT$1 condition 
            {
              Condition RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Operation.booleanOperator(c1, Global.AND, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$1 ::= 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.println(c1.true_label() + ":");    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condition ::= NOT condition 
            {
              Condition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.booleanOperator(null, Global.NOT, c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condition ::= exp GE exp 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.GE, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condition ::= exp GT exp 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.GT, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condition ::= exp LE exp 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.LE, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condition ::= exp LT exp 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.LT, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condition ::= exp NE exp 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.NE, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condition ::= exp EQ exp 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.EQ, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condition ::= OB condition CB 
            {
              Condition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cast_type ::= INT_CAST 
            {
              String RESULT =null;
		  RESULT = Global.INTEGER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_type",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cast_type ::= FLOAT_CAST 
            {
              String RESULT =null;
		  RESULT = Global.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_type",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numeric_expression ::= MINUS exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.arithmetic(null, Global.MINUS, e, castingType);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numeric_expression ::= exp MOD exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.MOD, e2, castingType);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numeric_expression ::= exp DIV exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.DIV, e2, castingType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numeric_expression ::= exp MUL exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.MUL, e2, castingType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numeric_expression ::= exp MINUS exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.MINUS, e2, castingType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numeric_expression ::= exp PLUS exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.PLUS, e2, castingType);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numeric_expression ::= VAR_NAME DEC 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = VarDeclaration.varValueDec(n, Global.RIGHT);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numeric_expression ::= VAR_NAME INC 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = VarDeclaration.varValueInc(n, Global.RIGHT);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numeric_expression ::= DEC VAR_NAME 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = VarDeclaration.varValueDec(n, Global.LEFT);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // numeric_expression ::= INC VAR_NAME 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = VarDeclaration.varValueInc(n, Global.LEFT);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // numeric_expression ::= VAR_NAME OCC exp CCC ASIG exp 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = VarDeclaration.reasign_array_index_value(n, i.getValue().toString(), e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numeric_expression ::= VAR_NAME OCC exp CCC 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = VarDeclaration.get_array_index_value(n, i.getValue().toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numeric_expression ::= VAR_NAME 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
        RESULT = VarDeclaration.getVar(n, null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numeric_expression ::= FLOAT_NUM 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
        RESULT = new Expression(Global.FLOAT, f);   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numeric_expression ::= INT_NUM 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
        RESULT = new Expression(Global.INTEGER, n);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numeric_expression ::= OB exp CB 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
        RESULT = n;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= cast_type NT$0 exp 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = Operation.cast(n, castingType); 
        remove_curret_cast(); 
        castingType = get_curret_cast(); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 cast_list.add(t); castingType = get_curret_cast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= numeric_expression 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p_value ::= exp 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n.getValue().toString();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_value",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= var_inicialization 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= var_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentence ::= error 
            {
              Object RESULT =null;
		  parser.syntax_error(null);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentence ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentence ::= PRINT OB p_value CB PYC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Print.printValue(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= do_while_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= while_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= for_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= if_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentence ::= expression PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_sentences ::= list_sentences sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sentences",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= list_sentences EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // list_sentences ::= sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sentences",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

