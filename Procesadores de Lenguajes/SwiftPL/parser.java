
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import instructions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\007\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\006\000\002\011\003" +
    "\000\002\011\003\000\002\026\003\000\002\026\003\000" +
    "\002\013\004\000\002\013\005\000\002\022\003\000\002" +
    "\022\005\000\002\017\006\000\002\017\010\000\002\017" +
    "\012\000\002\017\006\000\002\017\006\000\002\017\010" +
    "\000\002\017\012\000\002\017\006\000\002\020\005\000" +
    "\002\020\010\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\003\000\002\014\007\000\002\016\011" +
    "\000\002\016\013\000\002\030\003\000\002\030\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\015\010\000\002\021\011\000\002\021\006\000\002\021" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\050\003\033\005\030\006\041\007\024\011" +
    "\012\022\034\023\021\030\014\032\036\033\043\034\016" +
    "\035\032\037\006\041\042\042\035\043\025\046\011\047" +
    "\017\051\040\001\002\000\012\003\047\036\046\037\045" +
    "\040\051\001\002\000\052\002\001\003\033\005\030\006" +
    "\041\007\024\011\012\022\034\023\021\030\014\032\036" +
    "\033\043\034\016\035\032\037\006\041\042\042\035\043" +
    "\025\046\011\047\017\051\040\001\002\000\054\002\ufffd" +
    "\003\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\022\ufffd\023" +
    "\ufffd\027\ufffd\030\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\037\ufffd\041\ufffd\042\ufffd\043\ufffd\046\ufffd\047\ufffd\051" +
    "\ufffd\001\002\000\046\003\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\024\ufff0\026\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\001\002\000\012\003\047\036\046\037\045\040" +
    "\051\001\002\000\032\003\033\005\030\006\041\007\024" +
    "\011\012\023\021\030\014\032\036\033\043\034\016\035" +
    "\032\043\057\001\002\000\032\003\033\005\030\006\041" +
    "\007\024\011\012\023\021\030\014\032\036\033\043\034" +
    "\016\035\032\043\057\001\002\000\012\003\047\036\046" +
    "\037\045\040\051\001\002\000\020\030\014\031\237\032" +
    "\036\033\043\034\016\035\032\043\057\001\002\000\052" +
    "\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\031\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\001\002\000\052\003\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\001\002\000\032\003\033\005" +
    "\030\006\041\007\024\011\012\023\021\030\014\032\036" +
    "\033\043\034\016\035\032\043\057\001\002\000\004\002" +
    "\216\001\002\000\032\003\033\005\030\006\041\007\024" +
    "\011\012\023\021\030\014\032\036\033\043\034\016\035" +
    "\032\043\057\001\002\000\032\003\033\005\030\006\041" +
    "\007\024\011\012\023\021\030\014\032\036\033\043\034" +
    "\016\035\032\043\057\001\002\000\042\003\047\004\070" +
    "\005\065\006\076\007\073\012\066\013\100\014\077\015" +
    "\072\016\074\017\067\020\071\021\075\036\046\037\045" +
    "\040\051\001\002\000\032\003\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\011\uffdb\023\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\043\uffdb\001\002\000\050\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\030\176\036\uffd5\037" +
    "\uffd5\040\uffd5\044\201\045\200\001\002\000\046\003\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\024\ufff1" +
    "\026\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002\000\046\003" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\024" +
    "\uffef\026\uffef\036\uffef\037\uffef\040\uffef\001\002\000\032" +
    "\003\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\023\uffdd\030" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\043\uffdd\001\002" +
    "\000\012\003\047\036\046\037\045\040\051\001\002\000" +
    "\052\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\001\002\000\046\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\024\uffe2\026\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\001\002\000\004\023\171\001\002\000\004" +
    "\043\155\001\002\000\052\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\031" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002\000\054\002\uffff" +
    "\003\uffff\005\uffff\006\uffff\007\uffff\011\uffff\022\uffff\023" +
    "\uffff\027\uffff\030\uffff\032\uffff\033\uffff\034\uffff\035\uffff" +
    "\037\uffff\041\uffff\042\uffff\043\uffff\046\uffff\047\uffff\051" +
    "\uffff\001\002\000\006\043\135\060\133\001\002\000\032" +
    "\003\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\023\uffdc\030" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\043\uffdc\001\002" +
    "\000\004\043\053\001\002\000\052\003\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\024\uffda\025\uffda\026" +
    "\uffda\031\uffda\036\uffda\037\uffda\040\uffda\001\002\000\012" +
    "\003\047\036\046\037\045\040\051\001\002\000\054\002" +
    "\ufff3\003\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\022\ufff3" +
    "\023\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\037\ufff3\041\ufff3\042\ufff3\043\ufff3\046\ufff3\047\ufff3" +
    "\051\ufff3\001\002\000\054\002\ufff5\003\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\022\ufff5\023\ufff5\027\ufff5\030\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\046\ufff5\047\ufff5\051\ufff5\001\002\000\054" +
    "\002\ufff2\003\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\022" +
    "\ufff2\023\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2\046\ufff2\047" +
    "\ufff2\051\ufff2\001\002\000\054\002\ufff7\003\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\011\ufff7\022\ufff7\023\ufff7\027\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\046\ufff7\047\ufff7\051\ufff7\001\002\000" +
    "\054\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\022\ufff4\023\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\037\ufff4\041\ufff4\042\ufff4\043\ufff4\046\ufff4" +
    "\047\ufff4\051\ufff4\001\002\000\004\056\117\001\002\000" +
    "\010\025\054\044\055\056\uffc0\001\002\000\004\043\116" +
    "\001\002\000\032\003\033\005\030\006\041\007\024\011" +
    "\012\023\021\030\014\032\036\033\043\034\016\035\032" +
    "\043\057\001\002\000\042\003\uffcd\004\070\005\065\006" +
    "\076\007\073\012\066\013\100\014\077\015\072\016\074" +
    "\017\067\020\071\021\075\036\uffcd\037\uffcd\040\uffcd\001" +
    "\002\000\054\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\024\uffd5\025\uffd5\026\uffd5\030\060\031\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\001\002\000\006\032\061\043" +
    "\063\001\002\000\004\031\uffd3\001\002\000\004\031\064" +
    "\001\002\000\004\031\uffd2\001\002\000\052\003\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\031\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002" +
    "\000\032\003\033\005\030\006\041\007\024\011\012\023" +
    "\021\030\014\032\036\033\043\034\016\035\032\043\057" +
    "\001\002\000\032\003\033\005\030\006\041\007\024\011" +
    "\012\023\021\030\014\032\036\033\043\034\016\035\032" +
    "\043\057\001\002\000\032\003\033\005\030\006\041\007" +
    "\024\011\012\023\021\030\014\032\036\033\043\034\016" +
    "\035\032\043\057\001\002\000\032\003\033\005\030\006" +
    "\041\007\024\011\012\023\021\030\014\032\036\033\043" +
    "\034\016\035\032\043\057\001\002\000\032\003\033\005" +
    "\030\006\041\007\024\011\012\023\021\030\014\032\036" +
    "\033\043\034\016\035\032\043\057\001\002\000\032\003" +
    "\033\005\030\006\041\007\024\011\012\023\021\030\014" +
    "\032\036\033\043\034\016\035\032\043\057\001\002\000" +
    "\032\003\033\005\030\006\041\007\024\011\012\023\021" +
    "\030\014\032\036\033\043\034\016\035\032\043\057\001" +
    "\002\000\032\003\033\005\030\006\041\007\024\011\012" +
    "\023\021\030\014\032\036\033\043\034\016\035\032\043" +
    "\057\001\002\000\032\003\033\005\030\006\041\007\024" +
    "\011\012\023\021\030\014\032\036\033\043\034\016\035" +
    "\032\043\057\001\002\000\032\003\033\005\030\006\041" +
    "\007\024\011\012\023\021\030\014\032\036\033\043\034" +
    "\016\035\032\043\057\001\002\000\032\003\033\005\030" +
    "\006\041\007\024\011\012\023\021\030\014\032\036\033" +
    "\043\034\016\035\032\043\057\001\002\000\032\003\033" +
    "\005\030\006\041\007\024\011\012\023\021\030\014\032" +
    "\036\033\043\034\016\035\032\043\057\001\002\000\046" +
    "\003\uffdf\004\070\005\065\006\076\007\073\012\066\013" +
    "\uffdf\014\077\015\072\016\074\017\067\020\071\021\075" +
    "\024\uffdf\026\uffdf\036\uffdf\037\uffdf\040\uffdf\001\002\000" +
    "\046\003\uffe8\004\070\005\065\006\076\007\073\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\024\uffe8\026\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002" +
    "\000\046\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\024\uffeb\026\uffeb\036\uffeb\037\uffeb\040\uffeb\001" +
    "\002\000\046\003\uffe3\004\070\005\065\006\076\007\073" +
    "\012\uffe3\013\uffe3\014\077\015\072\016\074\017\067\020" +
    "\uffe3\021\uffe3\024\uffe3\026\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\001\002\000\046\003\uffe6\004\070\005\065\006\076\007" +
    "\073\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\024\uffe6\026\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\001\002\000\046\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\024\uffea\026\uffea\036\uffea\037\uffea" +
    "\040\uffea\001\002\000\046\003\uffe7\004\070\005\065\006" +
    "\076\007\073\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\024\uffe7\026\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\001\002\000\046\003\uffe4\004\070\005\065" +
    "\006\076\007\073\012\uffe4\013\uffe4\014\077\015\072\016" +
    "\074\017\067\020\uffe4\021\uffe4\024\uffe4\026\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\001\002\000\046\003\uffed\004\uffed\005" +
    "\uffed\006\076\007\073\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\024\uffed\026\uffed\036" +
    "\uffed\037\uffed\040\uffed\001\002\000\046\003\uffe5\004\070" +
    "\005\065\006\076\007\073\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\024\uffe5\026\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\001\002\000\046\003\uffe0\004" +
    "\070\005\065\006\076\007\073\012\uffe0\013\uffe0\014\077" +
    "\015\072\016\074\017\067\020\071\021\075\024\uffe0\026" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\046\003\uffec" +
    "\004\uffec\005\uffec\006\076\007\073\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\024\uffec" +
    "\026\uffec\036\uffec\037\uffec\040\uffec\001\002\000\004\056" +
    "\uffbf\001\002\000\006\025\054\056\uffc0\001\002\000\012" +
    "\030\122\053\120\054\123\055\124\001\002\000\016\003" +
    "\uffc3\031\uffc3\036\uffc3\037\uffc3\040\uffc3\044\uffc3\001\002" +
    "\000\014\003\uffca\036\uffca\037\uffca\040\uffca\044\131\001" +
    "\002\000\010\053\120\054\123\055\124\001\002\000\016" +
    "\003\uffc2\031\uffc2\036\uffc2\037\uffc2\040\uffc2\044\uffc2\001" +
    "\002\000\016\003\uffc1\031\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\044\uffc1\001\002\000\004\031\126\001\002\000\004\044" +
    "\127\001\002\000\004\030\014\001\002\000\012\003\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\001\002\000\032\003\033\005" +
    "\030\006\041\007\024\011\012\023\021\030\014\032\036" +
    "\033\043\034\016\035\032\043\057\001\002\000\042\003" +
    "\uffcc\004\070\005\065\006\076\007\073\012\066\013\100" +
    "\014\077\015\072\016\074\017\067\020\071\021\075\036" +
    "\uffcc\037\uffcc\040\uffcc\001\002\000\004\052\uffb8\001\002" +
    "\000\004\052\136\001\002\000\004\052\uffb9\001\002\000" +
    "\010\030\014\032\137\043\140\001\002\000\006\026\uffb5" +
    "\057\uffb5\001\002\000\006\026\uffb6\057\uffb6\001\002\000" +
    "\006\026\143\057\144\001\002\000\006\026\uffb7\057\uffb7" +
    "\001\002\000\050\003\033\005\030\006\041\007\024\011" +
    "\012\022\034\023\021\030\014\032\036\033\043\034\016" +
    "\035\032\037\006\041\042\042\035\043\025\046\011\047" +
    "\017\051\040\001\002\000\010\030\014\032\137\043\140" +
    "\001\002\000\004\026\146\001\002\000\050\003\033\005" +
    "\030\006\041\007\024\011\012\022\034\023\021\030\014" +
    "\032\036\033\043\034\016\035\032\037\006\041\042\042" +
    "\035\043\025\046\011\047\017\051\040\001\002\000\052" +
    "\003\033\005\030\006\041\007\024\011\012\022\034\023" +
    "\021\027\150\030\014\032\036\033\043\034\016\035\032" +
    "\037\006\041\042\042\035\043\025\046\011\047\017\051" +
    "\040\001\002\000\012\003\uffba\036\uffba\037\uffba\040\uffba" +
    "\001\002\000\054\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\011\ufffe\022\ufffe\023\ufffe\027\ufffe\030\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\037\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\046\ufffe\047\ufffe\051\ufffe\001\002\000\052\003\033" +
    "\005\030\006\041\007\024\011\012\022\034\023\021\027" +
    "\153\030\014\032\036\033\043\034\016\035\032\037\006" +
    "\041\042\042\035\043\025\046\011\047\017\051\040\001" +
    "\002\000\012\003\uffbb\036\uffbb\037\uffbb\040\uffbb\001\002" +
    "\000\004\056\160\001\002\000\010\025\054\044\156\056" +
    "\uffc0\001\002\000\032\003\033\005\030\006\041\007\024" +
    "\011\012\023\021\030\014\032\036\033\043\034\016\035" +
    "\032\043\057\001\002\000\042\003\uffc9\004\070\005\065" +
    "\006\076\007\073\012\066\013\100\014\077\015\072\016" +
    "\074\017\067\020\071\021\075\036\uffc9\037\uffc9\040\uffc9" +
    "\001\002\000\012\030\161\053\120\054\123\055\124\001" +
    "\002\000\010\053\120\054\123\055\124\001\002\000\014" +
    "\003\uffc6\036\uffc6\037\uffc6\040\uffc6\044\163\001\002\000" +
    "\032\003\033\005\030\006\041\007\024\011\012\023\021" +
    "\030\014\032\036\033\043\034\016\035\032\043\057\001" +
    "\002\000\042\003\uffc8\004\070\005\065\006\076\007\073" +
    "\012\066\013\100\014\077\015\072\016\074\017\067\020" +
    "\071\021\075\036\uffc8\037\uffc8\040\uffc8\001\002\000\004" +
    "\031\166\001\002\000\004\044\167\001\002\000\004\030" +
    "\014\001\002\000\012\003\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\001\002\000\032\003\033\005\030\006\041\007\024\011" +
    "\012\023\021\030\014\032\036\033\043\034\016\035\032" +
    "\043\057\001\002\000\034\004\070\005\065\006\076\007" +
    "\073\012\066\013\100\014\077\015\072\016\074\017\067" +
    "\020\071\021\075\024\173\001\002\000\012\003\047\036" +
    "\046\037\045\040\051\001\002\000\054\002\ufffb\003\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\011\ufffb\022\ufffb\023\ufffb\027" +
    "\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\037\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\046\ufffb\047\ufffb\051\ufffb\001" +
    "\002\000\054\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\011\ufffa\022\ufffa\023\ufffa\027\ufffa\030\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\037\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\046\ufffa\047\ufffa\051\ufffa\001\002\000\006\032\061\043" +
    "\063\001\002\000\032\003\033\005\030\006\041\007\024" +
    "\011\012\023\021\030\014\032\036\033\043\034\016\035" +
    "\032\043\057\001\002\000\032\003\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\011\uffbd\023\uffbd\030\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\043\uffbd\001\002\000\032\003\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\011\uffbe\023\uffbe\030\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\043\uffbe\001\002\000\042\003\uffc5" +
    "\004\070\005\065\006\076\007\073\012\066\013\100\014" +
    "\077\015\072\016\074\017\067\020\071\021\075\036\uffc5" +
    "\037\uffc5\040\uffc5\001\002\000\004\031\204\001\002\000" +
    "\046\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\044\201\045\200\001\002" +
    "\000\032\003\033\005\030\006\041\007\024\011\012\023" +
    "\021\030\014\032\036\033\043\034\016\035\032\043\057" +
    "\001\002\000\042\003\uffc4\004\070\005\065\006\076\007" +
    "\073\012\066\013\100\014\077\015\072\016\074\017\067" +
    "\020\071\021\075\036\uffc4\037\uffc4\040\uffc4\001\002\000" +
    "\054\002\ufffc\003\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc" +
    "\022\ufffc\023\ufffc\027\ufffc\030\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\037\ufffc\041\ufffc\042\ufffc\043\ufffc\046\ufffc" +
    "\047\ufffc\051\ufffc\001\002\000\046\003\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\024\uffe9\026\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\001\002\000\034\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\024\215\001\002\000\032" +
    "\004\070\005\065\006\076\007\073\012\066\013\100\014" +
    "\077\015\072\016\074\017\067\020\071\021\075\001\002" +
    "\000\034\004\ufff1\005\ufff1\006\ufff1\007\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\024\214\001\002\000\046\003\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\024\uffee\026\uffee\036\uffee\037" +
    "\uffee\040\uffee\001\002\000\046\003\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\024\uffe1\026\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\001\002\000\004\002\000\001\002\000" +
    "\034\004\070\005\065\006\076\007\073\012\066\013\100" +
    "\014\077\015\072\016\074\017\067\020\071\021\075\026" +
    "\220\001\002\000\050\003\033\005\030\006\041\007\024" +
    "\011\012\022\034\023\021\030\014\032\036\033\043\034" +
    "\016\035\032\037\006\041\042\042\035\043\025\046\011" +
    "\047\017\051\040\001\002\000\052\003\033\005\030\006" +
    "\041\007\024\011\012\022\034\023\021\027\222\030\014" +
    "\032\036\033\043\034\016\035\032\037\006\041\042\042" +
    "\035\043\025\046\011\047\017\051\040\001\002\000\014" +
    "\003\uffb1\036\uffb1\037\uffb1\040\uffb1\050\223\001\002\000" +
    "\006\026\225\047\226\001\002\000\012\003\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\001\002\000\050\003\033\005\030\006" +
    "\041\007\024\011\012\022\034\023\021\030\014\032\036" +
    "\033\043\034\016\035\032\037\006\041\042\042\035\043" +
    "\025\046\011\047\017\051\040\001\002\000\032\003\033" +
    "\005\030\006\041\007\024\011\012\023\021\030\014\032" +
    "\036\033\043\034\016\035\032\043\057\001\002\000\034" +
    "\004\070\005\065\006\076\007\073\012\066\013\100\014" +
    "\077\015\072\016\074\017\067\020\071\021\075\026\230" +
    "\001\002\000\050\003\033\005\030\006\041\007\024\011" +
    "\012\022\034\023\021\030\014\032\036\033\043\034\016" +
    "\035\032\037\006\041\042\042\035\043\025\046\011\047" +
    "\017\051\040\001\002\000\052\003\033\005\030\006\041" +
    "\007\024\011\012\022\034\023\021\027\232\030\014\032" +
    "\036\033\043\034\016\035\032\037\006\041\042\042\035" +
    "\043\025\046\011\047\017\051\040\001\002\000\014\003" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\050\223\001\002\000\012" +
    "\003\uffb3\036\uffb3\037\uffb3\040\uffb3\001\002\000\052\003" +
    "\033\005\030\006\041\007\024\011\012\022\034\023\021" +
    "\027\235\030\014\032\036\033\043\034\016\035\032\037" +
    "\006\041\042\042\035\043\025\046\011\047\017\051\040" +
    "\001\002\000\012\003\uffb2\036\uffb2\037\uffb2\040\uffb2\001" +
    "\002\000\004\031\243\001\002\000\054\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\031\uffd1\036\uffd1\037\uffd1\040\uffd1\057\uffd1\001" +
    "\002\000\006\025\241\031\uffcf\001\002\000\016\030\014" +
    "\032\036\033\043\034\016\035\032\043\057\001\002\000" +
    "\004\031\uffce\001\002\000\054\003\uffd0\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\031\uffd0\036\uffd0\037\uffd0\040\uffd0\057\uffd0\001\002\000" +
    "\054\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8" +
    "\022\ufff8\023\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\037\ufff8\041\ufff8\042\ufff8\043\ufff8\046\ufff8" +
    "\047\ufff8\051\ufff8\001\002\000\046\003\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\024\uffde\026\uffde\036" +
    "\uffde\037\uffde\040\uffde\001\002\000\034\004\070\005\065" +
    "\006\076\007\073\012\066\013\100\014\077\015\072\016" +
    "\074\017\067\020\071\021\075\026\247\001\002\000\050" +
    "\003\033\005\030\006\041\007\024\011\012\022\034\023" +
    "\021\030\014\032\036\033\043\034\016\035\032\037\006" +
    "\041\042\042\035\043\025\046\011\047\017\051\040\001" +
    "\002\000\052\003\033\005\030\006\041\007\024\011\012" +
    "\022\034\023\021\027\251\030\014\032\036\033\043\034" +
    "\016\035\032\037\006\041\042\042\035\043\025\046\011" +
    "\047\017\051\040\001\002\000\012\003\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\001\002\000\054\002\ufff6\003\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\022\ufff6\023\ufff6\027\ufff6\030" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\046\ufff6\047\ufff6\051\ufff6\001\002\000" +
    "\054\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9" +
    "\022\ufff9\023\ufff9\027\ufff9\030\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\037\ufff9\041\ufff9\042\ufff9\043\ufff9\046\ufff9" +
    "\047\ufff9\051\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\036\002\017\003\004\004\036\006\022\007" +
    "\025\010\006\011\026\012\021\013\014\014\012\015\043" +
    "\016\007\017\030\020\003\001\001\000\004\005\252\001" +
    "\001\000\032\004\150\006\022\007\025\010\006\011\026" +
    "\012\021\013\014\014\012\015\043\016\007\017\030\020" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\251\001\001\000\016\006\245\007\025\010\006\011" +
    "\026\012\021\013\014\001\001\000\016\006\244\007\025" +
    "\010\006\011\026\012\021\013\014\001\001\000\004\005" +
    "\243\001\001\000\010\011\237\013\014\022\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\216\007" +
    "\025\010\006\011\026\012\021\013\014\001\001\000\002" +
    "\001\001\000\016\006\211\007\212\010\210\011\026\012" +
    "\021\013\014\001\001\000\016\006\207\007\025\010\006" +
    "\011\026\012\021\013\014\001\001\000\004\005\206\001" +
    "\001\000\002\001\001\000\004\025\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\133\001\001\000\002\001\001" +
    "\000\004\024\051\001\001\000\002\001\001\000\004\005" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\114\001\001\000\016" +
    "\006\055\007\025\010\006\011\026\012\021\013\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\113\007\025\010\006" +
    "\011\026\012\021\013\014\001\001\000\016\006\112\007" +
    "\025\010\006\011\026\012\021\013\014\001\001\000\016" +
    "\006\111\007\025\010\006\011\026\012\021\013\014\001" +
    "\001\000\016\006\110\007\025\010\006\011\026\012\021" +
    "\013\014\001\001\000\016\006\107\007\025\010\006\011" +
    "\026\012\021\013\014\001\001\000\016\006\106\007\025" +
    "\010\006\011\026\012\021\013\014\001\001\000\016\006" +
    "\105\007\025\010\006\011\026\012\021\013\014\001\001" +
    "\000\016\006\104\007\025\010\006\011\026\012\021\013" +
    "\014\001\001\000\016\006\103\007\025\010\006\011\026" +
    "\012\021\013\014\001\001\000\016\006\102\007\025\010" +
    "\006\011\026\012\021\013\014\001\001\000\016\006\101" +
    "\007\025\010\006\011\026\012\021\013\014\001\001\000" +
    "\016\006\100\007\025\010\006\011\026\012\021\013\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\127\001\001\000\002\001\001" +
    "\000\016\006\131\007\025\010\006\011\026\012\021\013" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\141\027\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\151\004\036\006\022\007" +
    "\025\010\006\011\026\012\021\013\014\014\012\015\043" +
    "\016\007\017\030\020\003\001\001\000\006\013\141\027" +
    "\144\001\001\000\002\001\001\000\034\003\146\004\036" +
    "\006\022\007\025\010\006\011\026\012\021\013\014\014" +
    "\012\015\043\016\007\017\030\020\003\001\001\000\032" +
    "\004\150\006\022\007\025\010\006\011\026\012\021\013" +
    "\014\014\012\015\043\016\007\017\030\020\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\150\006" +
    "\022\007\025\010\006\011\026\012\021\013\014\014\012" +
    "\015\043\016\007\017\030\020\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\156" +
    "\007\025\010\006\011\026\012\021\013\014\001\001\000" +
    "\002\001\001\000\004\023\161\001\001\000\004\023\164" +
    "\001\001\000\002\001\001\000\016\006\163\007\025\010" +
    "\006\011\026\012\021\013\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\167\001" +
    "\001\000\002\001\001\000\016\006\171\007\025\010\006" +
    "\011\026\012\021\013\014\001\001\000\002\001\001\000" +
    "\004\005\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\202\001\001\000\016\006\201\007\025\010" +
    "\006\011\026\012\021\013\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\204\001\001\000\016\006\205\007\025\010\006" +
    "\011\026\012\021\013\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\220" +
    "\004\036\006\022\007\025\010\006\011\026\012\021\013" +
    "\014\014\012\015\043\016\007\017\030\020\003\001\001" +
    "\000\032\004\150\006\022\007\025\010\006\011\026\012" +
    "\021\013\014\014\012\015\043\016\007\017\030\020\003" +
    "\001\001\000\004\021\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\233\004\036\006\022\007\025" +
    "\010\006\011\026\012\021\013\014\014\012\015\043\016" +
    "\007\017\030\020\003\001\001\000\016\006\226\007\025" +
    "\010\006\011\026\012\021\013\014\001\001\000\002\001" +
    "\001\000\034\003\230\004\036\006\022\007\025\010\006" +
    "\011\026\012\021\013\014\014\012\015\043\016\007\017" +
    "\030\020\003\001\001\000\032\004\150\006\022\007\025" +
    "\010\006\011\026\012\021\013\014\014\012\015\043\016" +
    "\007\017\030\020\003\001\001\000\004\021\232\001\001" +
    "\000\002\001\001\000\032\004\150\006\022\007\025\010" +
    "\006\011\026\012\021\013\014\014\012\015\043\016\007" +
    "\017\030\020\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\237" +
    "\013\014\022\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\247\004\036\006\022\007\025\010\006\011" +
    "\026\012\021\013\014\014\012\015\043\016\007\017\030" +
    "\020\003\001\001\000\032\004\150\006\022\007\025\010" +
    "\006\011\026\012\021\013\014\014\012\015\043\016\007" +
    "\017\030\020\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/* Método para reportar errores durante la compilación */
	public void report_error(String msg, Object info) {
  		System.out.println(msg);
  		System.exit(0);
	}

	/* Método para reportar errores durante el análisis léxico*/
	public void syntax_error(Symbol cur_token){
		report_error("error léxico", null);
		System.exit(0);
	}
	
	/*	Árbol AST generado con todas las instrucciones del parser */
	List<Instruction> AST;

	public List<Instruction> getAST(){
		return AST;
	}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // in ::= instructions 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		parser.AST = i;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instruction 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT=new ArrayList<>(); RESULT.add(i);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> is = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		RESULT = is; RESULT.add(i);	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= SK_LINE 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= expression eol 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= PRINT OB expression CB eol 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Print(e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= var_declaration eol 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclaration v = (VarDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = v;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= var_assignment eol 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= while_instruction eol 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileIns w = (WhileIns)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= if_instruction eol 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfIns i = (IfIns)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= for_instruction eol 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ForInIns f = (ForInIns)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // eol ::= EOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eol",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // eol ::= PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eol",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // eol ::= SK_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eol",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // eol ::= error 
            {
              Object RESULT =null;
		 report_error("error (fin de línea inválido)", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eol",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= numerical_operation 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = n;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= boolean_operation 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = b;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= value 
            {
              Operation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numerical_operation ::= OB numerical_operation CB 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation n = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = n;		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numerical_operation ::= expression PLUS expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.PLUS, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numerical_operation ::= expression MINUS expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.MINUS, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numerical_operation ::= expression MUL expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.MUL, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // numerical_operation ::= expression DIV expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.DIV, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // numerical_operation ::= unitNumOperator expression 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(u, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numerical_operation ::= expression LT expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.LT, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numerical_operation ::= expression LE expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.LE, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numerical_operation ::= expression GT expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.GT, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numerical_operation ::= expression GE expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.GE, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numerical_operation ::= expression EQ expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.EQ, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numerical_operation ::= expression NE expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.NE, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numerical_operation ::= error 
            {
              Operation RESULT =null;
			syntax_error(null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolean_operation ::= OB boolean_operation CB 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = b;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolean_operation ::= expression AND expression 
            {
              Operation RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation b1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(b1, Global.AND, b2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolean_operation ::= expression OR expression 
            {
              Operation RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation b1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(b1, Global.OR, b2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolean_operation ::= NOT expression 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation (Global.NOT, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unitNumOperator ::= MINUS 
            {
              String RESULT =null;
			RESULT = Global.MINUS;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unitNumOperator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unitNumOperator ::= MUL 
            {
              String RESULT =null;
		 report_error("error (* no es operación unaria)", null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unitNumOperator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unitNumOperator ::= DIV 
            {
              String RESULT =null;
		 report_error("error (* no es operación unaria)", null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unitNumOperator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= DOUBLE 
            {
              Operation RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(Double.parseDouble(d));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(Integer.parseInt(i));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= TRUE 
            {
              Operation RESULT =null;
		 RESULT = new Operation(new Boolean(true));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value ::= FALSE 
            {
              Operation RESULT =null;
			RESULT = new Operation(new Boolean(false));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= VAR_NAME OK arrayIndex CK 
            {
              Operation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation i = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Operation(v, i, Global.VARIABLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= VAR_NAME 
            {
              Operation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(v, Global.VARIABLE);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= array 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array a = (Array)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arrayIndex ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(Integer.parseInt(i));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIndex",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arrayIndex ::= VAR_NAME 
            {
              Operation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(v, Global.VARIABLE);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIndex",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array ::= OK CK 
            {
              Array RESULT =null;
			
		List l = new ArrayList<>();
		RESULT = new Array(l);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array ::= OK list_values CK 
            {
              Array RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new Array(lv);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_values ::= value 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		List l = new ArrayList<>();
		l.add(v);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_values",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_values ::= value COMMA list_values 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List l = new ArrayList<>();
		l.add(v);
		l.addAll(lv);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_values",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_declaration ::= VAR VAR_NAME ASIG expression 
            {
              VarDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarDeclaration(n, Global.VARIA, e);   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_declaration ::= VAR vars DECL_TYPE type ASIG expression 
            {
              VarDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
													
		String n = v.get(0);
		RESULT = new VarDeclaration(n, Global.VARIA, e, t);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_declaration ::= VAR vars DECL_TYPE OK type CK ASIG array 
            {
              VarDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array a = (Array)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		String n = v.get(0);
		RESULT = new VarDeclaration(n, Global.VARIA, new Operation(a), t);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_declaration ::= VAR vars DECL_TYPE type 
            {
              VarDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new VarDeclaration(v, Global.VARIA, t);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_declaration ::= LET VAR_NAME ASIG expression 
            {
              VarDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarDeclaration(n, Global.CONST, e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_declaration ::= LET vars DECL_TYPE type ASIG expression 
            {
              VarDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			String n = v.get(0);
		RESULT = new VarDeclaration(n, Global.CONST, e, t);    
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var_declaration ::= LET vars DECL_TYPE OK type CK ASIG array 
            {
              VarDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array a = (Array)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		String n = v.get(0);
		RESULT = new VarDeclaration(n, Global.CONST, new Operation(a), t);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_declaration ::= LET vars DECL_TYPE type 
            {
              VarDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarDeclaration(v, Global.CONST, t);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_assignment ::= VAR_NAME asig2 expression 
            {
              VarAssignment RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarAssignment(n, e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // var_assignment ::= VAR_NAME OK arrayIndex CK asig2 expression 
            {
              VarAssignment RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation i = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarAssignment(n,i,e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= DOUBLE_TYPE 
            {
              String RESULT =null;
			RESULT = Global.DOUBLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= INTEGER_TYPE 
            {
              String RESULT =null;
			RESULT = Global.INTEGER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= BOOLEAN_TYPE 
            {
              String RESULT =null;
			RESULT = Global.BOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // vars ::= VAR_NAME 
            {
              List<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		List<String> l = new ArrayList<>();
		l.add(n);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // vars ::= VAR_NAME COMMA vars 
            {
              List<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<String> l = new ArrayList<>();
		l.add(n);
		l.addAll(v);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asig2 ::= ASIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asig2 ::= ASIG2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // while_instruction ::= WHILE expression OCC instructions CCC 
            {
              WhileIns RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new WhileIns(b,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_instruction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // for_instruction ::= FOR for_var_name IN sequence OCC instructions CCC 
            {
              ForInIns RESULT =null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String index = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new ForInIns(index, a, ins);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_instruction",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // for_instruction ::= FOR for_var_name IN sequence FOR_SEQ sequence OCC instructions CCC 
            {
              ForInIns RESULT =null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String index = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operation i1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation i2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new ForInIns(index, i1, i2, ins);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_instruction",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // for_var_name ::= VAR_NAME 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for_var_name ::= FOR_NO_VAR 
            {
              String RESULT =null;
			RESULT = Global.NO_FOR_VARIABLE_DECLARE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sequence ::= array 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array a = (Array)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sequence ::= VAR_NAME 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(n, Global.VARIABLE);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sequence ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(Integer.parseInt(i));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_instruction ::= IF expression OCC instructions CCC else_part 
            {
              IfIns RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			 RESULT = new IfIns(b, i, e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_instruction",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else_part ::= ELSE IF expression OCC instructions CCC else_part 
            {
              List<Instruction> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		List<Instruction> l = new ArrayList<>();
		IfIns ins = new IfIns(b, i, e);
		l.add(ins);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else_part ::= ELSE OCC instructions CCC 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
		List<Instruction> l = new ArrayList<>();
		IfIns ins = new IfIns(i);
		l.add(ins);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else_part ::= 
            {
              List<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
