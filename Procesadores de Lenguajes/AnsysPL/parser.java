
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\015\002\000\002\016\002\000\002\012\020\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\017\002\000\002\020\002\000\002\013\015\000\002\021" +
    "\002\000\002\013\005\000\002\013\002\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\005\003\000\002\005\005\000\002\022" +
    "\002\000\002\004\006\000\002\023\002\000\002\004\010" +
    "\000\002\004\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\002\000\002\011\010\000\002" +
    "\011\006\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\016\004\014\010\010\013\007\026\012\030" +
    "\006\031\015\001\002\000\022\002\ufffc\004\ufffc\010\ufffc" +
    "\013\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\001\002\000" +
    "\022\002\ufffd\004\ufffd\010\ufffd\013\ufffd\026\ufffd\030\ufffd" +
    "\031\ufffd\032\ufffd\001\002\000\004\003\137\001\002\000" +
    "\024\002\uffe7\004\uffe7\010\uffe7\011\135\013\uffe7\026\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\001\002\000\004\011\130\001" +
    "\002\000\022\002\ufffe\004\ufffe\010\ufffe\013\ufffe\026\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\001\002\000\006\003\065\011" +
    "\ufffb\001\002\000\020\002\062\004\014\010\010\013\007" +
    "\026\012\030\006\031\015\001\002\000\006\003\020\012" +
    "\021\001\002\000\004\003\017\001\002\000\020\002\001" +
    "\004\001\010\001\013\001\026\001\030\001\031\001\001" +
    "\002\000\022\002\ufff7\004\ufff7\010\ufff7\013\ufff7\026\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\001\002\000\022\002\uffe1\004" +
    "\uffe1\010\uffe1\013\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\001\002\000\036\002\uffe5\004\uffe5\005\uffe5\007\uffe5\010" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\021\uffe5\026\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\001\002\000\036\002\uffdd\004" +
    "\031\005\026\007\025\010\uffdd\013\uffdd\014\024\015\027" +
    "\016\033\021\023\026\uffdd\030\uffdd\031\uffdd\032\uffdd\001" +
    "\002\000\012\004\031\007\025\016\033\021\023\001\002" +
    "\000\004\016\054\001\002\000\040\002\uffda\004\uffda\010" +
    "\uffda\011\uffda\013\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\026\uffda\030\uffda\031\uffda\032\uffda\001" +
    "\002\000\026\002\uffe0\004\uffe0\010\uffe0\011\uffe0\013\uffe0" +
    "\017\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\001\002\000" +
    "\004\016\051\001\002\000\026\002\uffdf\004\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\017\uffdf\026\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\001\002\000\040\002\uffd9\004\uffd9\010\uffd9\011\uffd9" +
    "\013\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\001\002\000\040" +
    "\002\uffde\004\uffde\010\uffde\011\uffde\013\uffde\017\uffde\020" +
    "\040\021\042\022\041\023\043\024\037\026\uffde\030\uffde" +
    "\031\uffde\032\uffde\001\002\000\012\004\031\007\025\016" +
    "\033\021\023\001\002\000\022\002\uffe4\004\uffe4\010\uffe4" +
    "\013\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\001\002\000" +
    "\016\017\036\020\040\021\042\022\041\023\043\024\037" +
    "\001\002\000\040\002\uffd8\004\uffd8\010\uffd8\011\uffd8\013" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\032\uffd8\001\002\000\012\004" +
    "\031\007\025\016\033\021\023\001\002\000\012\004\031" +
    "\007\025\016\033\021\023\001\002\000\012\004\031\007" +
    "\025\016\033\021\023\001\002\000\012\004\031\007\025" +
    "\016\033\021\023\001\002\000\012\004\031\007\025\016" +
    "\033\021\023\001\002\000\040\002\uffd4\004\uffd4\010\uffd4" +
    "\011\uffd4\013\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\037\026\uffd4\030\uffd4\031\uffd4\032\uffd4\001\002" +
    "\000\040\002\uffd6\004\uffd6\010\uffd6\011\uffd6\013\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\041\023\043\024\037\026\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\001\002\000\040\002\uffd5\004" +
    "\uffd5\010\uffd5\011\uffd5\013\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\037\026\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\001\002\000\040\002\uffd7\004\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\017\uffd7\020\uffd7\021\uffd7\022\041\023\043\024" +
    "\037\026\uffd7\030\uffd7\031\uffd7\032\uffd7\001\002\000\040" +
    "\002\uffd3\004\uffd3\010\uffd3\011\uffd3\013\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\037\026\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\001\002\000\022\004\031\005\026\007" +
    "\025\014\024\015\027\016\033\017\uffdd\021\023\001\002" +
    "\000\004\017\053\001\002\000\026\002\uffdb\004\uffdb\010" +
    "\uffdb\011\uffdb\013\uffdb\017\uffdb\026\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\001\002\000\022\004\031\005\026\007\025\011" +
    "\uffdd\014\024\015\027\016\033\021\023\001\002\000\004" +
    "\011\056\001\002\000\022\004\031\005\026\007\025\014" +
    "\024\015\027\016\033\017\uffdd\021\023\001\002\000\004" +
    "\017\060\001\002\000\026\002\uffdc\004\uffdc\010\uffdc\011" +
    "\uffdc\013\uffdc\017\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\001\002\000\040\002\uffd2\004\uffd2\010\uffd2\011\uffd2\013" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\037" +
    "\026\uffd2\030\uffd2\031\uffd2\032\uffd2\001\002\000\004\002" +
    "\000\001\002\000\020\002\uffff\004\uffff\010\uffff\013\uffff" +
    "\026\uffff\030\uffff\031\uffff\001\002\000\004\011\066\001" +
    "\002\000\022\002\ufff8\004\ufff8\010\ufff8\013\ufff8\026\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\001\002\000\022\004\031\005" +
    "\026\007\025\011\uffdd\014\024\015\027\016\033\021\023" +
    "\001\002\000\004\011\070\001\002\000\022\033\071\034" +
    "\074\035\073\036\076\037\077\040\101\041\100\042\075" +
    "\001\002\000\004\011\uffef\001\002\000\004\011\102\001" +
    "\002\000\004\011\uffec\001\002\000\004\011\uffee\001\002" +
    "\000\004\011\uffe8\001\002\000\004\011\uffed\001\002\000" +
    "\004\011\uffeb\001\002\000\004\011\uffe9\001\002\000\004" +
    "\011\uffea\001\002\000\022\004\031\005\026\007\025\011" +
    "\uffdd\014\024\015\027\016\033\021\023\001\002\000\004" +
    "\011\ufffa\001\002\000\004\011\105\001\002\000\004\027" +
    "\106\001\002\000\016\004\014\010\010\013\007\026\012" +
    "\030\006\031\015\001\002\000\010\030\110\031\111\032" +
    "\ufff0\001\002\000\004\011\ufff5\001\002\000\016\004\ufff2" +
    "\010\ufff2\013\ufff2\026\ufff2\030\ufff2\031\ufff2\001\002\000" +
    "\004\032\113\001\002\000\022\002\ufff9\004\ufff9\010\ufff9" +
    "\013\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\001\002\000" +
    "\016\004\014\010\010\013\007\026\012\030\006\031\015" +
    "\001\002\000\004\032\ufff1\001\002\000\004\011\117\001" +
    "\002\000\022\004\031\005\026\007\025\011\uffdd\014\024" +
    "\015\027\016\033\021\023\001\002\000\004\011\121\001" +
    "\002\000\022\033\071\034\074\035\073\036\076\037\077" +
    "\040\101\041\100\042\075\001\002\000\004\011\123\001" +
    "\002\000\032\004\031\005\026\007\025\010\uffdd\013\uffdd" +
    "\014\024\015\027\016\033\021\023\026\uffdd\030\uffdd\031" +
    "\uffdd\001\002\000\016\004\ufff4\010\ufff4\013\ufff4\026\ufff4" +
    "\030\ufff4\031\ufff4\001\002\000\016\004\014\010\010\013" +
    "\007\026\012\030\006\031\015\001\002\000\010\030\110" +
    "\031\111\032\ufff0\001\002\000\004\032\ufff3\001\002\000" +
    "\004\004\131\001\002\000\004\011\uffe3\001\002\000\004" +
    "\011\133\001\002\000\036\002\uffdd\004\031\005\026\007" +
    "\025\010\uffdd\013\uffdd\014\024\015\027\016\033\021\023" +
    "\026\uffdd\030\uffdd\031\uffdd\032\uffdd\001\002\000\022\002" +
    "\uffe2\004\uffe2\010\uffe2\013\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\001\002\000\004\004\136\001\002\000\022\002" +
    "\uffe6\004\uffe6\010\uffe6\013\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\001\002\000\022\002\ufff6\004\ufff6\010\ufff6\013" +
    "\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\014\002\015\003\012\004\010\005\004\012" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\063\001\001\000\012\002\062\004\010" +
    "\005\004\012\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\021\001\001\000\010\007\033\010\031\011" +
    "\027\001\001\000\004\010\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\047\001\001\000\004\010\046" +
    "\001\001\000\004\010\045\001\001\000\004\010\044\001" +
    "\001\000\004\010\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\051\010\031\011\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\054\010\031\011" +
    "\027\001\001\000\002\001\001\000\010\007\056\010\031" +
    "\011\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\066\010\031\011" +
    "\027\001\001\000\002\001\001\000\004\014\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\102\010\031\011\027\001\001\000\004\016\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\106\004" +
    "\010\005\004\012\003\001\001\000\004\013\111\001\001" +
    "\000\004\017\115\001\001\000\004\021\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\114\004\010" +
    "\005\004\012\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\117\010\031\011\027\001\001\000\002" +
    "\001\001\000\004\014\121\001\001\000\002\001\001\000" +
    "\010\007\123\010\031\011\027\001\001\000\004\020\124" +
    "\001\001\000\012\002\125\004\010\005\004\012\003\001" +
    "\001\000\004\013\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\131\001\001\000\002\001\001\000" +
    "\010\007\133\010\031\011\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	boolean conditionIf = false;
	boolean isInIf      = false;
	boolean headIf      = false;
	int ifCount = 0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // list_sentences ::= sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sentences",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= list_sentences EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_sentences ::= list_sentences sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sentences",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentences ::= asignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentences ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentences ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
 ifCount++; headIf = true; conditionIf=false; isInIf=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Var v1 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v2 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		if (Gen.resCondition(v1, o, v2)) {
			conditionIf = true;
		}else{
			conditionIf = false;
		}
		headIf = false;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // if ::= IF NT$0 COMMA value COMMA operator COMMA value NT$1 COMMA THEN sentences else_part ENDIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Var v1 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Var v2 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 ifCount--; conditionIf=false; if (ifCount==0) {isInIf=false;} headIf = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // if ::= IF error 
            {
              Object RESULT =null;
		 Err.newError("SENTENCIA *IF MAL CONSTRUIDA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // if ::= ELSE error 
            {
              Object RESULT =null;
		 Err.newError("SENTENCIA *IF MAL CONSTRUIDA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if ::= ELSEIF error 
            {
              Object RESULT =null;
		 Err.newError("SENTENCIA *IF MAL CONSTRUIDA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
 headIf = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Var v1 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v2 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  
		if (!conditionIf && Gen.resCondition(v1, o, v2)) {
			conditionIf = true;
		}else{
			conditionIf = false;
		}
		headIf = false;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // else_part ::= ELSEIF NT$2 COMMA value COMMA operator COMMA value NT$3 sentences else_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Var v1 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v2 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;
  
		if (!conditionIf) { 
			conditionIf = true;
		}else{
			conditionIf = false;
		}  
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // else_part ::= ELSE NT$4 sentences 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // else_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operator ::= ABGT 
            {
              String RESULT =null;
		 RESULT = "ABGT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operator ::= ABLT 
            {
              String RESULT =null;
		 RESULT = "ABLT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operator ::= LE 
            {
              String RESULT =null;
		 RESULT = "LE"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operator ::= GE 
            {
              String RESULT =null;
		 RESULT = "GE"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operator ::= GT 
            {
              String RESULT =null;
		 RESULT = "GT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operator ::= LT 
            {
              String RESULT =null;
		 RESULT = "LT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operator ::= NE 
            {
              String RESULT =null;
		 RESULT = "NE"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operator ::= EQ 
            {
              String RESULT =null;
		 RESULT = "EQ"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // print ::= STATUS 
            {
              Object RESULT =null;
		
	
	 if (!isInIf || headIf || (isInIf && conditionIf)){
	 	String res = Gen.print(null);
	 }
	  
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // print ::= STATUS COMMA NAME_VAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (!isInIf || headIf || (isInIf && conditionIf)){
			if (Gen.nameVarIsNotValid(n)){
				Err.newError("NOMBRE PARÁMETRO");
			}
			
			if (Gen.nameVarIsWarning(n)){
				Err.newWarning("NOMBRE PARÁMETRO");
			}
			
			if (TS.getVariable(n) == null){//variable no definida
				TS.setVariable(n, new Var("SCALAR", String.valueOf(Double.MIN_VALUE)));
			}
			String res = Gen.print(n);
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
		if (!isInIf || headIf || (isInIf && conditionIf)){
			if (Gen.nameVarIsNotValid(n)){
				Err.newError("NOMBRE PARÁMETRO");
			}
			
			if (Gen.nameVarIsWarning(n)){
				Err.newWarning("NOMBRE PARÁMETRO");
			}
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignment ::= NAME_VAR ASIG NT$5 value 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if (!isInIf || headIf || (isInIf && conditionIf)){
				TS.setVariable(n,v);
			}
 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			if (!isInIf || headIf || (isInIf && conditionIf)){
				if (Gen.nameVarIsNotValid(n)){
					Err.newError("NOMBRE PARÁMETRO");
				}
				
				if (Gen.nameVarIsWarning(n)){
					Err.newWarning("NOMBRE PARÁMETRO");
				}
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignment ::= SET COMMA NAME_VAR NT$6 COMMA value 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
			if (!isInIf || headIf || (isInIf && conditionIf)){
				TS.setVariable(n,v);
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignment ::= NAME_VAR error 
            {
              Object RESULT =null;
		 
	
		report_error("NOMBRE PARÁMETRO", null);
	Err.newError("NOMBRE PARÁMETRO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= STRING 
            {
              Var RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		if (!isInIf || headIf || (isInIf && conditionIf)){
			if (s.length() > 8){
				Err.newError("TEXTO LARGO");
			}
			RESULT = new Var("CHARACTER", s); 
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= scalarFunct 
            {
              Var RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!isInIf || headIf || (isInIf && conditionIf)){ RESULT = new Var("SCALAR", String.valueOf(f)); } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= expression 
            {
              Var RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!isInIf || headIf || (isInIf && conditionIf)){ RESULT = new Var("SCALAR", String.valueOf(e)); } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= 
            {
              Var RESULT =null;
		 if (!isInIf || headIf || (isInIf && conditionIf)){ RESULT = new Var("SCALAR", 				    		   String.valueOf(Double.MIN_VALUE)); }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // scalarFunct ::= SIGN OB value COMMA value CB 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v1 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v2 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Double value1 = Double.parseDouble(v1.getValueVar());
			Double value2 = Double.parseDouble(v2.getValueVar());
			
			if (value2 >= 0){
				RESULT = Math.abs(value1);
			}else{
				if (value1 < 0) {
					RESULT = value1;
				}else{
					RESULT = (-1)*value1;
				}
				
			}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalarFunct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // scalarFunct ::= ABS OB value CB 
            {
              Double RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = Math.abs(Double.parseDouble(v.getValueVar())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalarFunct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= NAME_VAR 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (Gen.nameVarIsNotValid(n)){
			Err.newError("NOMBRE PARÁMETRO");
		}
			
		if (Gen.nameVarIsWarning(n)){
			Err.newWarning("NOMBRE PARÁMETRO");
		}
		
		//value assigment when variable is not defined
		Var v = TS.getVariable(n);
		if (v==null){
			TS.setVariable(n, new Var("SCALAR", String.valueOf(Double.MIN_VALUE)));
			RESULT = Double.MIN_VALUE;
		}else{
			
			RESULT = Double.parseDouble(v.getValueVar());
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= OB expression CB 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression PLUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression MINUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression MUL expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1*e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression DIV expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression POW expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Math.pow(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= MINUS expression 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
