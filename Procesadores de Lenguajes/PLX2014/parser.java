
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 17 12:00:41 CEST 2021
//----------------------------------------------------

import java_cup.runtime.*;
import ctdGenerator.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 17 12:00:41 CEST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\007\000" +
    "\002\002\003\000\002\002\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\013\003\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\004\000\002\041\002\000\002" +
    "\016\006\000\002\042\002\000\002\016\006\000\002\006" +
    "\004\000\002\012\006\000\002\012\004\000\002\015\004" +
    "\000\002\015\002\000\002\007\005\000\002\011\003\000" +
    "\002\011\005\000\002\043\002\000\002\044\002\000\002" +
    "\017\012\000\002\020\003\000\002\021\004\000\002\021" +
    "\002\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\026\003\000\002\045\002\000\002\046\002\000" +
    "\002\047\002\000\002\023\016\000\002\033\003\000\002" +
    "\033\005\000\002\033\003\000\002\050\002\000\002\051" +
    "\002\000\002\024\013\000\002\052\002\000\002\053\002" +
    "\000\002\025\013\000\002\031\005\000\002\030\003\000" +
    "\002\027\003\000\002\032\004\000\002\032\002\000\002" +
    "\054\002\000\002\055\002\000\002\034\011\000\002\036" +
    "\003\000\002\056\002\000\002\057\002\000\002\035\013" +
    "\000\002\037\003\000\002\060\002\000\002\061\002\000" +
    "\002\040\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\040\003\041\004\006\005\012\007\037\014" +
    "\022\016\005\022\033\023\040\024\010\037\013\041\024" +
    "\042\035\043\044\046\021\050\011\001\002\000\004\014" +
    "\234\001\002\000\040\003\uffac\004\uffac\005\uffac\007\uffac" +
    "\014\uffac\016\uffac\022\uffac\023\uffac\024\uffac\037\uffac\041" +
    "\uffac\042\uffac\043\uffac\046\uffac\050\uffac\001\002\000\052" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\015\ufff1\020" +
    "\ufff1\021\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\001\002\000\006\014\162\022\164\001\002\000\004" +
    "\022\153\001\002\000\004\014\uffb1\001\002\000\052\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\015\ufff0\020\ufff0" +
    "\021\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\001\002\000\004\014\uffcd\001\002\000\046\002\ufff8\003" +
    "\ufff8\004\ufff8\005\ufff8\007\ufff8\014\ufff8\016\ufff8\017\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\046\ufff8\050\ufff8\001\002\000\004\014\uffb4" +
    "\001\002\000\044\002\001\003\001\004\001\005\001\007" +
    "\001\014\001\016\001\017\001\022\001\023\001\024\001" +
    "\037\001\041\001\042\001\043\001\046\001\050\001\001" +
    "\002\000\042\002\143\003\041\004\006\005\012\007\037" +
    "\014\022\016\005\022\033\023\040\024\010\037\013\041" +
    "\024\042\035\043\044\046\021\050\011\001\002\000\004" +
    "\025\137\001\002\000\040\003\uffad\004\uffad\005\uffad\007" +
    "\uffad\014\uffad\016\uffad\022\uffad\023\uffad\024\uffad\037\uffad" +
    "\041\uffad\042\uffad\043\uffad\046\uffad\050\uffad\001\002\000" +
    "\020\004\006\005\012\007\037\014\022\022\050\041\024" +
    "\042\035\001\002\000\046\002\ufffa\003\ufffa\004\ufffa\005" +
    "\ufffa\007\ufffa\014\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\046" +
    "\ufffa\050\ufffa\001\002\000\004\022\135\001\002\000\046" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\007\ufffd\014\ufffd\016" +
    "\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\046\ufffd\050\ufffd\001\002\000" +
    "\046\002\uffca\003\uffca\004\uffca\005\uffca\007\uffca\014\uffca" +
    "\016\uffca\017\uffca\022\uffca\023\uffca\024\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\046\uffca\050\uffca\001\002" +
    "\000\004\020\ufff4\001\002\000\004\020\134\001\002\000" +
    "\040\003\uffb0\004\uffb0\005\uffb0\007\uffb0\014\uffb0\016\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\037\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\046\uffb0\050\uffb0\001\002\000\046\002\ufffc\003\ufffc" +
    "\004\ufffc\005\ufffc\007\ufffc\014\ufffc\016\ufffc\017\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\046\ufffc\050\ufffc\001\002\000\024\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\020\uffef\025\uffd2\041\054" +
    "\042\055\001\002\000\016\006\057\007\061\010\060\011" +
    "\062\013\056\020\ufff6\001\002\000\004\022\071\001\002" +
    "\000\004\020\ufff5\001\002\000\020\004\006\005\012\007" +
    "\037\014\022\022\050\041\024\042\035\001\002\000\004" +
    "\014\046\001\002\000\046\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\007\ufff7\014\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\046" +
    "\ufff7\050\ufff7\001\002\000\046\002\uffc8\003\uffc8\004\uffc8" +
    "\005\uffc8\007\uffc8\014\uffc8\016\uffc8\017\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\046\uffc8\050\uffc8\001\002\000\046\002\uffc9\003\uffc9\004" +
    "\uffc9\005\uffc9\007\uffc9\014\uffc9\016\uffc9\017\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\046\uffc9\050\uffc9\001\002\000\006\014\uffc7\022\uffc7" +
    "\001\002\000\046\002\ufffb\003\ufffb\004\ufffb\005\ufffb\007" +
    "\ufffb\014\ufffb\016\ufffb\017\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\046\ufffb\050" +
    "\ufffb\001\002\000\020\004\006\005\012\007\037\014\022" +
    "\022\050\041\024\042\035\001\002\000\016\006\057\007" +
    "\061\010\060\011\062\013\056\015\ufff3\001\002\000\056" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\015\uffef\020" +
    "\uffef\021\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\041\054\042\055\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\001\002\000\004\015\052\001\002" +
    "\000\004\020\053\001\002\000\046\002\ufff9\003\ufff9\004" +
    "\ufff9\005\ufff9\007\ufff9\014\ufff9\016\ufff9\017\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\046\ufff9\050\ufff9\001\002\000\052\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\013\uffec\015\uffec\020\uffec\021\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\044\uffec\045\uffec\046\uffec\047\uffec\001\002\000" +
    "\052\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\015\uffeb" +
    "\020\uffeb\021\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\001\002\000\020\004\006\005\012\007\037\014" +
    "\022\022\050\041\024\042\035\001\002\000\020\004\006" +
    "\005\012\007\037\014\022\022\050\041\024\042\035\001" +
    "\002\000\020\004\006\005\012\007\037\014\022\022\050" +
    "\041\024\042\035\001\002\000\020\004\006\005\012\007" +
    "\037\014\022\022\050\041\024\042\035\001\002\000\020" +
    "\004\006\005\012\007\037\014\022\022\050\041\024\042" +
    "\035\001\002\000\052\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\013\uffe7\015\uffe7\020\uffe7\021\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\001\002\000\052\006\uffe9\007" +
    "\uffe9\010\060\011\062\013\056\015\uffe9\020\uffe9\021\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\001\002" +
    "\000\052\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\015" +
    "\uffe8\020\uffe8\021\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\001\002\000\052\006\uffea\007\uffea\010\060" +
    "\011\062\013\056\015\uffea\020\uffea\021\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\001\002\000\052\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\015\uffe6\020\uffe6" +
    "\021\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\001\002\000\052\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013" +
    "\uffe5\015\uffe5\020\uffe5\021\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\001\002\000\052\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\013\uffed\015\uffed\020\uffed\021\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\044\uffed\045\uffed\046\uffed\047\uffed\001\002\000" +
    "\040\003\041\004\006\005\012\007\037\014\022\016\005" +
    "\022\033\023\040\024\010\037\013\041\024\042\035\043" +
    "\044\046\021\050\011\001\002\000\004\050\074\001\002" +
    "\000\004\014\075\001\002\000\022\004\006\005\012\007" +
    "\037\014\100\022\050\036\101\041\024\042\035\001\002" +
    "\000\030\006\057\007\061\010\060\011\062\013\056\026" +
    "\122\027\116\030\117\031\114\032\115\033\121\001\002" +
    "\000\010\015\uffaf\034\104\035\103\001\002\000\022\004" +
    "\006\005\012\007\037\014\100\022\050\036\101\041\024" +
    "\042\035\001\002\000\022\004\006\005\012\007\037\014" +
    "\100\022\050\036\101\041\024\042\035\001\002\000\012" +
    "\015\uffdd\020\uffdd\034\104\035\103\001\002\000\022\004" +
    "\uffdc\005\uffdc\007\uffdc\014\uffdc\022\uffdc\036\uffdc\041\uffdc" +
    "\042\uffdc\001\002\000\022\004\uffda\005\uffda\007\uffda\014" +
    "\uffda\022\uffda\036\uffda\041\uffda\042\uffda\001\002\000\022" +
    "\004\006\005\012\007\037\014\100\022\050\036\101\041" +
    "\024\042\035\001\002\000\012\015\uffd9\020\uffd9\034\uffd9" +
    "\035\103\001\002\000\022\004\006\005\012\007\037\014" +
    "\100\022\050\036\101\041\024\042\035\001\002\000\012" +
    "\015\uffdb\020\uffdb\034\uffdb\035\uffdb\001\002\000\032\006" +
    "\057\007\061\010\060\011\062\013\056\015\120\026\122" +
    "\027\116\030\117\031\114\032\115\033\121\001\002\000" +
    "\010\015\113\034\104\035\103\001\002\000\012\015\uffe4" +
    "\020\uffe4\034\uffe4\035\uffe4\001\002\000\020\004\006\005" +
    "\012\007\037\014\022\022\050\041\024\042\035\001\002" +
    "\000\020\004\006\005\012\007\037\014\022\022\050\041" +
    "\024\042\035\001\002\000\020\004\006\005\012\007\037" +
    "\014\022\022\050\041\024\042\035\001\002\000\020\004" +
    "\006\005\012\007\037\014\022\022\050\041\024\042\035" +
    "\001\002\000\052\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013" +
    "\ufff2\015\ufff2\020\ufff2\021\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\044\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\001\002\000\020\004\006\005\012" +
    "\007\037\014\022\022\050\041\024\042\035\001\002\000" +
    "\020\004\006\005\012\007\037\014\022\022\050\041\024" +
    "\042\035\001\002\000\024\006\057\007\061\010\060\011" +
    "\062\013\056\015\uffe1\020\uffe1\034\uffe1\035\uffe1\001\002" +
    "\000\024\006\057\007\061\010\060\011\062\013\056\015" +
    "\uffe2\020\uffe2\034\uffe2\035\uffe2\001\002\000\024\006\057" +
    "\007\061\010\060\011\062\013\056\015\uffdf\020\uffdf\034" +
    "\uffdf\035\uffdf\001\002\000\024\006\057\007\061\010\060" +
    "\011\062\013\056\015\uffe0\020\uffe0\034\uffe0\035\uffe0\001" +
    "\002\000\024\006\057\007\061\010\060\011\062\013\056" +
    "\015\uffe3\020\uffe3\034\uffe3\035\uffe3\001\002\000\024\006" +
    "\057\007\061\010\060\011\062\013\056\015\uffde\020\uffde" +
    "\034\uffde\035\uffde\001\002\000\004\015\132\001\002\000" +
    "\004\020\133\001\002\000\046\002\uffae\003\uffae\004\uffae" +
    "\005\uffae\007\uffae\014\uffae\016\uffae\017\uffae\022\uffae\023" +
    "\uffae\024\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\046\uffae\050\uffae\001\002\000\046\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\007\ufffe\014\ufffe\016\ufffe\017\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\046\ufffe\050\ufffe\001\002\000\052\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\013\uffee\015\uffee\020\uffee\021\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001\002\000" +
    "\016\006\057\007\061\010\060\011\062\013\056\015\120" +
    "\001\002\000\020\004\006\005\012\007\037\014\022\022" +
    "\141\041\024\042\035\001\002\000\020\006\057\007\061" +
    "\010\060\011\062\013\056\015\uffd3\020\uffd3\001\002\000" +
    "\026\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\015\uffef" +
    "\020\uffef\025\uffd1\041\054\042\055\001\002\000\044\002" +
    "\uffff\003\uffff\004\uffff\005\uffff\007\uffff\014\uffff\016\uffff" +
    "\017\uffff\022\uffff\023\uffff\024\uffff\037\uffff\041\uffff\042" +
    "\uffff\043\uffff\046\uffff\050\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\014\145\001\002\000\022\004\006\005" +
    "\012\007\037\014\100\022\050\036\101\041\024\042\035" +
    "\001\002\000\010\015\uffb3\034\104\035\103\001\002\000" +
    "\004\015\150\001\002\000\040\003\041\004\006\005\012" +
    "\007\037\014\022\016\005\022\033\023\040\024\010\037" +
    "\013\041\024\042\035\043\044\046\021\050\011\001\002" +
    "\000\046\002\uffb2\003\uffb2\004\uffb2\005\uffb2\007\uffb2\014" +
    "\uffb2\016\uffb2\017\uffb2\022\uffb2\023\uffb2\024\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\046\uffb2\050\uffb2\001" +
    "\002\000\006\020\uffd8\021\157\001\002\000\010\020\uffd4" +
    "\021\uffd4\025\155\001\002\000\006\020\uffd6\021\uffd6\001" +
    "\002\000\020\004\006\005\012\007\037\014\022\022\050" +
    "\041\024\042\035\001\002\000\020\006\057\007\061\010" +
    "\060\011\062\013\056\020\uffd5\021\uffd5\001\002\000\004" +
    "\022\160\001\002\000\010\020\uffd4\021\uffd4\025\155\001" +
    "\002\000\006\020\uffd7\021\uffd7\001\002\000\004\022\164" +
    "\001\002\000\006\044\167\045\172\001\002\000\004\025" +
    "\165\001\002\000\020\004\006\005\012\007\037\014\022" +
    "\022\050\041\024\042\035\001\002\000\022\006\057\007" +
    "\061\010\060\011\062\013\056\020\uffb9\044\uffb9\045\uffb9" +
    "\001\002\000\020\004\uffb8\005\uffb8\007\uffb8\014\uffb8\022" +
    "\uffb8\041\uffb8\042\uffb8\001\002\000\020\004\006\005\012" +
    "\007\037\014\022\022\050\041\024\042\035\001\002\000" +
    "\020\004\006\005\012\007\037\014\022\022\050\041\024" +
    "\042\035\001\002\000\020\004\uffb7\005\uffb7\007\uffb7\014" +
    "\uffb7\022\uffb7\041\uffb7\042\uffb7\001\002\000\020\006\057" +
    "\007\061\010\060\011\062\013\056\046\uffbc\047\uffbc\001" +
    "\002\000\006\046\uffb5\047\175\001\002\000\020\004\006" +
    "\005\012\007\037\014\022\022\050\041\024\042\035\001" +
    "\002\000\004\046\177\001\002\000\040\003\uffbb\004\uffbb" +
    "\005\uffbb\007\uffbb\014\uffbb\016\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb\046\uffbb\050\uffbb" +
    "\001\002\000\040\003\041\004\006\005\012\007\037\014" +
    "\022\016\005\022\033\023\040\024\010\037\013\041\024" +
    "\042\035\043\044\046\021\050\011\001\002\000\046\002" +
    "\uffba\003\uffba\004\uffba\005\uffba\007\uffba\014\uffba\016\uffba" +
    "\017\uffba\022\uffba\023\uffba\024\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\046\uffba\050\uffba\001\002\000\016" +
    "\006\057\007\061\010\060\011\062\013\056\046\uffb6\001" +
    "\002\000\020\006\057\007\061\010\060\011\062\013\056" +
    "\046\uffbf\047\uffbf\001\002\000\006\046\uffb5\047\175\001" +
    "\002\000\004\046\206\001\002\000\040\003\uffbe\004\uffbe" +
    "\005\uffbe\007\uffbe\014\uffbe\016\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\037\uffbe\041\uffbe\042\uffbe\043\uffbe\046\uffbe\050\uffbe" +
    "\001\002\000\040\003\041\004\006\005\012\007\037\014" +
    "\022\016\005\022\033\023\040\024\010\037\013\041\024" +
    "\042\035\043\044\046\021\050\011\001\002\000\046\002" +
    "\uffbd\003\uffbd\004\uffbd\005\uffbd\007\uffbd\014\uffbd\016\uffbd" +
    "\017\uffbd\022\uffbd\023\uffbd\024\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\046\uffbd\050\uffbd\001\002\000\004" +
    "\020\212\001\002\000\022\004\uffc6\005\uffc6\007\uffc6\014" +
    "\uffc6\022\uffc6\036\uffc6\041\uffc6\042\uffc6\001\002\000\022" +
    "\004\006\005\012\007\037\014\100\022\050\036\101\041" +
    "\024\042\035\001\002\000\010\020\215\034\104\035\103" +
    "\001\002\000\020\004\uffc5\005\uffc5\007\uffc5\014\uffc5\022" +
    "\uffc5\041\uffc5\042\uffc5\001\002\000\020\004\006\005\012" +
    "\007\037\014\022\022\221\041\024\042\035\001\002\000" +
    "\016\006\057\007\061\010\060\011\062\013\056\015\uffc2" +
    "\001\002\000\004\015\uffc0\001\002\000\024\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\015\uffef\025\uffd2\041\054" +
    "\042\055\001\002\000\004\015\223\001\002\000\040\003" +
    "\uffc4\004\uffc4\005\uffc4\007\uffc4\014\uffc4\016\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\046" +
    "\uffc4\050\uffc4\001\002\000\040\003\041\004\006\005\012" +
    "\007\037\014\022\016\005\022\033\023\040\024\010\037" +
    "\013\041\024\042\035\043\044\046\021\050\011\001\002" +
    "\000\046\002\uffc3\003\uffc3\004\uffc3\005\uffc3\007\uffc3\014" +
    "\uffc3\016\uffc3\017\uffc3\022\uffc3\023\uffc3\024\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046\uffc3\050\uffc3\001" +
    "\002\000\020\004\006\005\012\007\037\014\022\022\050" +
    "\041\024\042\035\001\002\000\016\006\057\007\061\010" +
    "\060\011\062\013\056\015\uffc1\001\002\000\040\003\041" +
    "\004\006\005\012\007\037\014\022\016\005\022\033\023" +
    "\040\024\010\037\013\041\024\042\035\043\044\046\021" +
    "\050\011\001\002\000\042\003\041\004\006\005\012\007" +
    "\037\014\022\016\005\017\uffab\022\033\023\040\024\010" +
    "\037\013\041\024\042\035\043\044\046\021\050\011\001" +
    "\002\000\004\017\233\001\002\000\046\002\uffaa\003\uffaa" +
    "\004\uffaa\005\uffaa\007\uffaa\014\uffaa\016\uffaa\017\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\046\uffaa\050\uffaa\001\002\000\022\004\006\005" +
    "\012\007\037\014\100\022\050\036\101\041\024\042\035" +
    "\001\002\000\010\015\236\034\104\035\103\001\002\000" +
    "\040\003\uffd0\004\uffd0\005\uffd0\007\uffd0\014\uffd0\016\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\037\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\046\uffd0\050\uffd0\001\002\000\040\003\041\004\006" +
    "\005\012\007\037\014\022\016\005\022\033\023\040\024" +
    "\010\037\013\041\024\042\035\043\044\046\021\050\011" +
    "\001\002\000\046\002\uffcf\003\uffcf\004\uffcf\005\uffcf\007" +
    "\uffcf\014\uffcf\016\uffcf\017\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\046\uffcf\050" +
    "\uffcf\001\002\000\046\002\uffcb\003\uffcb\004\uffcb\005\uffcb" +
    "\007\uffcb\014\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\037\uffcb\040\242\041\uffcb\042\uffcb\043\uffcb\046\uffcb" +
    "\050\uffcb\001\002\000\040\003\041\004\006\005\012\007" +
    "\037\014\022\016\005\022\033\023\040\024\010\037\013" +
    "\041\024\042\035\043\044\046\021\050\011\001\002\000" +
    "\046\002\uffce\003\uffce\004\uffce\005\uffce\007\uffce\014\uffce" +
    "\016\uffce\017\uffce\022\uffce\023\uffce\024\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\046\uffce\050\uffce\001\002" +
    "\000\046\002\uffcc\003\uffcc\004\uffcc\005\uffcc\007\uffcc\014" +
    "\uffcc\016\uffcc\017\uffcc\022\uffcc\023\uffcc\024\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\046\uffcc\050\uffcc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\050\002\015\003\016\004\027\005\033\006" +
    "\035\007\026\011\017\017\024\020\003\022\031\023\041" +
    "\024\025\025\042\026\006\034\044\035\022\036\014\037" +
    "\030\040\013\001\001\000\002\001\001\000\004\060\227" +
    "\001\001\000\002\001\001\000\004\031\162\001\001\000" +
    "\004\012\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\143\001" +
    "\001\000\002\001\001\000\046\002\141\004\027\005\033" +
    "\006\035\007\026\011\017\017\024\020\003\022\031\023" +
    "\041\024\025\025\042\026\006\034\044\035\022\036\014" +
    "\037\030\040\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\046" +
    "\013\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\066\001\001\000" +
    "\004\005\065\001\001\000\004\005\064\001\001\000\004" +
    "\005\063\001\001\000\004\005\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\002\072\004\027\005\033\006\035\007\026\011\017" +
    "\017\024\020\003\022\031\023\041\024\025\025\042\026" +
    "\006\034\044\035\022\036\014\037\030\040\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\075\016" +
    "\076\001\001\000\002\001\001\000\004\057\130\001\001" +
    "\000\006\005\110\016\111\001\001\000\006\005\075\016" +
    "\101\001\001\000\002\001\001\000\004\041\106\001\001" +
    "\000\004\042\104\001\001\000\006\005\075\016\105\001" +
    "\001\000\002\001\001\000\006\005\075\016\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\127\001\001\000\004\005\126" +
    "\001\001\000\004\005\125\001\001\000\004\005\124\001" +
    "\001\000\002\001\001\000\004\005\123\001\001\000\004" +
    "\005\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\075\016\145\001\001\000\004\055\146\001" +
    "\001\000\002\001\001\000\046\002\150\004\027\005\033" +
    "\006\035\007\026\011\017\017\024\020\003\022\031\023" +
    "\041\024\025\025\042\026\006\034\044\035\022\036\014" +
    "\037\030\040\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\153\001\001\000\002\001\001\000\004" +
    "\005\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\160\001\001\000\002\001\001\000\004\031\210" +
    "\001\001\000\006\027\170\030\167\001\001\000\002\001" +
    "\001\000\004\005\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\202\001\001\000\004\005\172\001" +
    "\001\000\002\001\001\000\004\052\173\001\001\000\004" +
    "\032\175\001\001\000\004\005\201\001\001\000\002\001" +
    "\001\000\004\053\177\001\001\000\046\002\200\004\027" +
    "\005\033\006\035\007\026\011\017\017\024\020\003\022" +
    "\031\023\041\024\025\025\042\026\006\034\044\035\022" +
    "\036\014\037\030\040\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\203\001\001\000\004\032\204" +
    "\001\001\000\002\001\001\000\004\051\206\001\001\000" +
    "\046\002\207\004\027\005\033\006\035\007\026\011\017" +
    "\017\024\020\003\022\031\023\041\024\025\025\042\026" +
    "\006\034\044\035\022\036\014\037\030\040\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\212\001" +
    "\001\000\006\005\075\016\213\001\001\000\002\001\001" +
    "\000\004\046\215\001\001\000\012\005\216\007\217\011" +
    "\017\033\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\223\001" +
    "\001\000\046\002\224\004\027\005\033\006\035\007\026" +
    "\011\017\017\024\020\003\022\031\023\041\024\025\025" +
    "\042\026\006\034\044\035\022\036\014\037\030\040\013" +
    "\001\001\000\002\001\001\000\004\005\226\001\001\000" +
    "\002\001\001\000\050\002\015\003\230\004\027\005\033" +
    "\006\035\007\026\011\017\017\024\020\003\022\031\023" +
    "\041\024\025\025\042\026\006\034\044\035\022\036\014" +
    "\037\030\040\013\001\001\000\050\002\141\004\027\005" +
    "\033\006\035\007\026\011\017\017\024\020\003\022\031" +
    "\023\041\024\025\025\042\026\006\034\044\035\022\036" +
    "\014\037\030\040\013\061\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\075\016\234\001\001\000" +
    "\002\001\001\000\004\043\236\001\001\000\046\002\237" +
    "\004\027\005\033\006\035\007\026\011\017\017\024\020" +
    "\003\022\031\023\041\024\025\025\042\026\006\034\044" +
    "\035\022\036\014\037\030\040\013\001\001\000\004\044" +
    "\240\001\001\000\004\021\242\001\001\000\046\002\243" +
    "\004\027\005\033\006\035\007\026\011\017\017\024\020" +
    "\003\022\031\023\041\024\025\025\042\026\006\034\044" +
    "\035\022\036\014\037\030\040\013\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
		Global.error("syntax error");
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // block ::= OCB NT$15 list_sentences NT$16 CCB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 TS.deleteBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$15 ::= 
            {
              Object RESULT =null;
 TS.newBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // do_head ::= DO 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_head",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // do_while_sentence ::= do_head NT$13 sentence WHILE OB condition NT$14 CB PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_sentence",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(c.true_label()); 
                                             Global.gotoLabel(d);   
                                             Global.label(c.false_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$13 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(d);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while_head ::= WHILE 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_head",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while_sentence ::= while_head NT$11 OB condition NT$12 CB sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Global.gotoLabel(w); Global.label(c.false_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_sentence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Global.label(w);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // step_part ::= 
            {
              Expression RESULT =null;
		  RESULT = new Expression(Global.INTEGER, new Integer(1));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step_part",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // step_part ::= STEP numeric_expression 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step_part",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // down_label ::= DOWNTO 
            {
              String RESULT =null;
		  RESULT = TS.newLabel();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("down_label",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // to_label ::= TO 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("to_label",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loop_var ::= VAR_NAME ASIG numeric_expression 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      
        String name = VarDeclaration.intVarInicialization(n, e);
        RESULT = new Expression(e.getType(), name);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_var",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // for_down_sent ::= for_head loop_var down_label numeric_expression NT$9 step_part DO NT$10 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Global.gotoLabel(d);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.false_label());
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_down_sent",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 ForLoop.loop_var(v, Global.MINUS, s); Global.gotoLabel(f);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$9 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Global.label(f); RESULT = Operation.condition(v, Global.GE, e2); 
                                                               Global.label(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for_to_sent ::= for_head loop_var to_label numeric_expression NT$7 step_part DO NT$8 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Global.gotoLabel(t);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.false_label());
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_to_sent",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 ForLoop.loop_var(v, Global.PLUS,s); Global.gotoLabel(f);
                                                               Condition c = (Condition)RESULT;
                                                               Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$7 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Global.label(f); RESULT = Operation.condition(v, Global.LE, e2); 
                                                               Global.label(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // increment_part ::= var_inicialization 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = (Expression)v;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_part",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // increment_part ::= VAR_NAME ASIG numeric_expression 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   VarDeclaration.varValAct(n, e); RESULT = new Expression(e.getType(), n);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_part",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // increment_part ::= numeric_expression 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_part",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_loop ::= for_head OB loop_var PYC NT$4 condition PYC NT$5 increment_part CB NT$6 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Global.gotoLabel(RESULT.toString()); Global.label(c.false_label());    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Global.gotoLabel(f); Global.label(c.true_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = TS.newLabel(); Global.label(RESULT.toString());     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$4 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Global.label(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_head ::= FOR 
            {
              String RESULT =null;
		 RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_head",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_sentence ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_sentence",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_sentence ::= for_down_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_sentence",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_sentence ::= for_to_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_sentence",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_if_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_if_part ::= ELSE sentence 
            {
              Object RESULT =null;
		 String lab = TS.newLabel(); Global.label(lab);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_head ::= IF 
            {
              String RESULT =null;
		  RESULT = TS.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_head",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_sentence ::= if_head OB condition CB NT$2 sentence NT$3 else_if_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  Global.label(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_sentence",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
  Global.gotoLabel(i); Global.label(c.false_label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Global.label(c.true_label());    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vars_ini_array ::= vars_ini_array ASIG VAR_NAME 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<String> l = new ArrayList<>();
        l.add(n);
        l.addAll(v);
        RESULT = l;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_ini_array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vars_ini_array ::= VAR_NAME 
            {
              List<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
        List<String> l = new ArrayList<>(); 
        l.add(n); 
        RESULT = l; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_ini_array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_inicialization ::= vars_ini_array ASIG numeric_expression 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VarDeclaration.multipleAsigValueVar(l, e); RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inicialization",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_part ::= 
            {
              Expression RESULT =null;
		 RESULT = new Expression(Global.INTEGER, new Integer(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_part",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value_part ::= ASIG numeric_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_part",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // int_var_list_declaration ::= VAR_NAME value_part 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("#DECLARACIÓN: " + n + " = " + e.getValue());
        VarDeclaration.int_var_declaration(n, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_var_list_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // int_var_list_declaration ::= int_var_list_declaration COMMA VAR_NAME value_part 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
        System.out.println("#DECLARACIÓN: " + n + " = " + e.getValue());
       VarDeclaration.int_var_declaration(n, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_var_list_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_declaration ::= INT int_var_list_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condition ::= condition OR NT$1 condition 
            {
              Condition RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Operation.booleanOperator(c1, Global.OR, c2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$1 ::= 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  System.out.println(c1.false_label() + ":");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condition ::= condition AND NT$0 condition 
            {
              Condition RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Operation.booleanOperator(c1, Global.AND, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$0 ::= 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.println(c1.true_label() + ":");    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condition ::= NOT condition 
            {
              Condition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.booleanOperator(null, Global.NOT, c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condition ::= numeric_expression GE numeric_expression 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.GE, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition ::= numeric_expression GT numeric_expression 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.GT, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condition ::= numeric_expression LE numeric_expression 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.LE, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= numeric_expression LT numeric_expression 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.LT, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= numeric_expression NE numeric_expression 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.NE, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= numeric_expression EQ numeric_expression 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.condition(e1, Global.EQ, e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= OB condition CB 
            {
              Condition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numeric_expression ::= MINUS numeric_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = Operation.arithmetic(null, Global.MINUS, e);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numeric_expression ::= numeric_expression MOD numeric_expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.MOD, e2);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numeric_expression ::= numeric_expression DIV numeric_expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.DIV, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numeric_expression ::= numeric_expression MUL numeric_expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.MUL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // numeric_expression ::= numeric_expression MINUS numeric_expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.MINUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // numeric_expression ::= numeric_expression PLUS numeric_expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Operation.arithmetic(e1, Global.PLUS, e2);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numeric_expression ::= VAR_NAME DEC 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = VarDeclaration.varValueDec(n, Global.RIGHT);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numeric_expression ::= VAR_NAME INC 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = VarDeclaration.varValueInc(n, Global.RIGHT);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numeric_expression ::= DEC VAR_NAME 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = VarDeclaration.varValueDec(n, Global.LEFT);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numeric_expression ::= INC VAR_NAME 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = VarDeclaration.varValueInc(n, Global.LEFT);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numeric_expression ::= VAR_NAME 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      
        RESULT = VarDeclaration.getVar(n);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numeric_expression ::= FLOAT_NUM 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Expression(Global.FLOAT, f);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numeric_expression ::= INT_NUM 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Expression(Global.INTEGER, n);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numeric_expression ::= OB numeric_expression CB 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = n;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p_value ::= numeric_expression 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n.getValue().toString();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_value",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= var_inicialization 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= var_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= numeric_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentence ::= error 
            {
              Object RESULT =null;
		  parser.syntax_error(null);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentence ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentence ::= PRINT OB p_value CB PYC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Print.printValue(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= do_while_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= while_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= for_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= if_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentence ::= expression PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_sentences ::= list_sentences sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sentences",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= list_sentences EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // list_sentences ::= sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sentences",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

