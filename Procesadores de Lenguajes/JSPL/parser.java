
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 16 14:55:31 CEST 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import instructions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 16 14:55:31 CEST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\007\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\002" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\035\006\000\002\036" +
    "\010\000\002\041\003\000\002\041\002\000\002\037\006" +
    "\000\002\040\003\000\002\040\002\000\002\032\005\000" +
    "\002\033\003\000\002\033\002\000\002\013\004\000\002" +
    "\013\006\000\002\013\006\000\002\013\004\000\002\014" +
    "\005\000\002\014\004\000\002\014\004\000\002\014\010" +
    "\000\002\015\003\000\002\015\005\000\002\016\003\000" +
    "\002\016\005\000\002\020\010\000\002\021\011\000\002" +
    "\021\004\000\002\021\002\000\002\022\007\000\002\023" +
    "\010\000\002\024\013\000\002\030\011\000\002\026\003" +
    "\000\002\026\003\000\002\026\002\000\002\025\003\000" +
    "\002\025\002\000\002\027\003\000\002\027\003\000\002" +
    "\027\002\000\002\031\003\000\002\031\003\000\002\031" +
    "\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\062\003\035\005\015\006\036\007\022\012" +
    "\020\023\054\024\033\031\023\033\013\034\012\035\047" +
    "\036\034\037\050\041\027\045\053\046\011\047\046\052" +
    "\025\054\056\055\044\056\016\060\055\061\043\062\032" +
    "\001\002\000\066\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\012\ufff8\023\ufff8\024\ufff8\030\ufff8\031\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\001\002\000\004\042\272\001\002\000" +
    "\036\003\035\005\015\006\036\007\022\012\020\024\033" +
    "\031\023\033\013\034\012\035\047\036\034\037\050\047" +
    "\065\060\055\001\002\000\066\002\ufff5\003\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\012\ufff5\023\ufff5\024\ufff5\030\ufff5\031" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\052\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\001\002\000\126\002\uffed" +
    "\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\047" +
    "\uffed\051\uffed\052\uffed\054\uffed\055\uffed\056\uffed\060\uffed" +
    "\061\uffed\062\uffed\001\002\000\004\047\150\001\002\000" +
    "\126\002\uffd6\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\051\uffd6\052\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000\126\002\uffd5" +
    "\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\001\002\000\126\002\uffee\003\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\045\uffee\046\uffee\047\uffee\051\uffee" +
    "\052\uffee\054\uffee\055\uffee\056\uffee\060\uffee\061\uffee\062" +
    "\uffee\001\002\000\036\003\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\012\uffd9\024\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\047\uffd9\060\uffd9\001\002\000\004\024\234" +
    "\001\002\000\126\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\060\uffcf\061\uffcf\062\uffcf\001\002\000" +
    "\036\003\035\005\015\006\036\007\022\012\020\024\033" +
    "\031\023\033\013\034\012\035\047\036\034\037\050\047" +
    "\065\060\055\001\002\000\072\002\uffef\003\uffef\005\uffef" +
    "\006\uffef\007\uffef\012\uffef\023\uffef\024\uffef\030\uffef\031" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\144" +
    "\041\uffef\042\146\045\uffef\046\uffef\047\uffef\052\uffef\054" +
    "\uffef\055\uffef\056\uffef\060\uffef\061\uffef\062\uffef\001\002" +
    "\000\036\003\uffd7\005\uffd7\006\uffd7\007\uffd7\012\uffd7\024" +
    "\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\047\uffd7\060\uffd7\001\002\000\040\003\035\005\015\006" +
    "\036\007\022\012\020\024\033\031\023\032\uffc3\033\013" +
    "\034\012\035\047\036\034\037\050\047\065\060\055\001" +
    "\002\000\066\002\uffff\003\uffff\005\uffff\006\uffff\007\uffff" +
    "\012\uffff\023\uffff\024\uffff\030\uffff\031\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\041\uffff\045\uffff\046\uffff" +
    "\047\uffff\052\uffff\054\uffff\055\uffff\056\uffff\060\uffff\061" +
    "\uffff\062\uffff\001\002\000\004\024\212\001\002\000\066" +
    "\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\012\ufff4\023" +
    "\ufff4\024\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\041\ufff4\045\ufff4\046\ufff4\047\ufff4\052" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\001\002\000\066\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\012\ufffd\023\ufffd\024\ufffd\030\ufffd\031\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\041\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\001\002\000\006\026\151\050\210\001" +
    "\002\000\116\002\uffef\003\uffef\004\076\005\071\006\104" +
    "\007\101\011\074\012\uffef\013\072\014\106\015\105\016" +
    "\100\017\102\020\073\021\077\022\103\023\uffef\024\uffef" +
    "\030\uffef\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\144\041\uffef\042\146\045\uffef\046\uffef\047\uffef" +
    "\052\uffef\054\uffef\055\uffef\056\uffef\060\uffef\061\uffef\062" +
    "\uffef\001\002\000\036\003\035\005\015\006\036\007\022" +
    "\012\020\024\033\031\023\033\013\034\012\035\047\036" +
    "\034\037\050\047\065\060\055\001\002\000\036\003\035" +
    "\005\015\006\036\007\022\012\020\024\033\031\023\033" +
    "\013\034\012\035\047\036\034\037\050\047\065\060\055" +
    "\001\002\000\126\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002\000" +
    "\126\002\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\045\uffde" +
    "\046\uffde\047\uffde\051\uffde\052\uffde\054\uffde\055\uffde\056" +
    "\uffde\060\uffde\061\uffde\062\uffde\001\002\000\036\003\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\012\uffd8\024\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\047\uffd8\060\uffd8" +
    "\001\002\000\066\002\ufff3\003\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\012\ufff3\023\ufff3\024\ufff3\030\ufff3\031\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\052\ufff3\054\ufff3\055\ufff3\056\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\001\002\000\004\002\177\001\002\000" +
    "\064\002\001\003\035\005\015\006\036\007\022\012\020" +
    "\023\054\024\033\031\023\033\013\034\012\035\047\036" +
    "\034\037\050\041\027\045\053\046\011\047\046\052\025" +
    "\054\056\055\044\056\016\060\055\061\043\062\032\001" +
    "\002\000\126\002\uffce\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\045\uffce\046\uffce\047\uffce\051\uffce\052\uffce\054\uffce\055" +
    "\uffce\056\uffce\060\uffce\061\uffce\062\uffce\001\002\000\004" +
    "\047\171\001\002\000\004\024\165\001\002\000\126\002" +
    "\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046\uffec" +
    "\047\uffec\051\uffec\052\uffec\054\uffec\055\uffec\056\uffec\060" +
    "\uffec\061\uffec\062\uffec\001\002\000\130\002\uffd0\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\066\025\uffd0\026\uffba\030\uffd0\031" +
    "\156\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\157\044\160\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffba\052\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\001\002\000\126\002\uffd4\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4" +
    "\052\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\001\002\000\126\002\uffd2\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\060\uffd2\061\uffd2\062\uffd2\001\002" +
    "\000\072\002\uffef\003\uffef\005\uffef\006\uffef\007\uffef\012" +
    "\uffef\023\uffef\024\uffef\030\uffef\031\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\144\041\uffef\042\146\045" +
    "\uffef\046\uffef\047\uffef\052\uffef\054\uffef\055\uffef\056\uffef" +
    "\060\uffef\061\uffef\062\uffef\001\002\000\066\002\ufff7\003" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\012\ufff7\023\ufff7\024\ufff7" +
    "\030\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\041\ufff7\045\ufff7\046\ufff7\047\ufff7\052\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002\000" +
    "\004\047\150\001\002\000\004\024\141\001\002\000\004" +
    "\024\136\001\002\000\004\027\060\001\002\000\126\002" +
    "\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\051\uffcd\052\uffcd\054\uffcd\055\uffcd\056\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\001\002\000\062\003\035\005\015" +
    "\006\036\007\022\012\020\023\054\024\033\031\023\033" +
    "\013\034\012\035\047\036\034\037\050\041\027\045\053" +
    "\046\011\047\046\052\025\054\056\055\044\056\016\060" +
    "\055\061\043\062\032\001\002\000\004\055\062\001\002" +
    "\000\004\024\063\001\002\000\036\003\035\005\015\006" +
    "\036\007\022\012\020\024\033\031\023\033\013\034\012" +
    "\035\047\036\034\037\050\047\065\060\055\001\002\000" +
    "\036\004\076\005\071\006\104\007\101\011\074\013\072" +
    "\014\106\015\105\016\100\017\102\020\073\021\077\022" +
    "\103\025\132\001\002\000\126\002\uffd0\003\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\066\025\uffd0\026\uffd0\030\uffd0\031\067\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\001\002\000\040\003\035\005\015\006\036\007\022\012" +
    "\020\024\033\025\uffc6\031\023\033\013\034\012\035\047" +
    "\036\034\037\050\047\065\060\055\001\002\000\036\003" +
    "\035\005\015\006\036\007\022\012\020\024\033\031\023" +
    "\033\013\034\012\035\047\036\034\037\050\047\065\060" +
    "\055\001\002\000\036\004\076\005\071\006\104\007\101" +
    "\011\074\013\072\014\106\015\105\016\100\017\102\020" +
    "\073\021\077\022\103\032\075\001\002\000\036\003\035" +
    "\005\015\006\036\007\022\012\020\024\033\031\023\033" +
    "\013\034\012\035\047\036\034\037\050\047\065\060\055" +
    "\001\002\000\036\003\035\005\015\006\036\007\022\012" +
    "\020\024\033\031\023\033\013\034\012\035\047\036\034" +
    "\037\050\047\065\060\055\001\002\000\036\003\035\005" +
    "\015\006\036\007\022\012\020\024\033\031\023\033\013" +
    "\034\012\035\047\036\034\037\050\047\065\060\055\001" +
    "\002\000\036\003\035\005\015\006\036\007\022\012\020" +
    "\024\033\031\023\033\013\034\012\035\047\036\034\037" +
    "\050\047\065\060\055\001\002\000\126\002\uffd1\003\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1\047\uffd1\051" +
    "\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\001\002\000\036\003\035\005\015\006\036\007" +
    "\022\012\020\024\033\031\023\033\013\034\012\035\047" +
    "\036\034\037\050\047\065\060\055\001\002\000\036\003" +
    "\035\005\015\006\036\007\022\012\020\024\033\031\023" +
    "\033\013\034\012\035\047\036\034\037\050\047\065\060" +
    "\055\001\002\000\036\003\035\005\015\006\036\007\022" +
    "\012\020\024\033\031\023\033\013\034\012\035\047\036" +
    "\034\037\050\047\065\060\055\001\002\000\036\003\035" +
    "\005\015\006\036\007\022\012\020\024\033\031\023\033" +
    "\013\034\012\035\047\036\034\037\050\047\065\060\055" +
    "\001\002\000\036\003\035\005\015\006\036\007\022\012" +
    "\020\024\033\031\023\033\013\034\012\035\047\036\034" +
    "\037\050\047\065\060\055\001\002\000\036\003\035\005" +
    "\015\006\036\007\022\012\020\024\033\031\023\033\013" +
    "\034\012\035\047\036\034\037\050\047\065\060\055\001" +
    "\002\000\036\003\035\005\015\006\036\007\022\012\020" +
    "\024\033\031\023\033\013\034\012\035\047\036\034\037" +
    "\050\047\065\060\055\001\002\000\036\003\035\005\015" +
    "\006\036\007\022\012\020\024\033\031\023\033\013\034" +
    "\012\035\047\036\034\037\050\047\065\060\055\001\002" +
    "\000\036\003\035\005\015\006\036\007\022\012\020\024" +
    "\033\031\023\033\013\034\012\035\047\036\034\037\050" +
    "\047\065\060\055\001\002\000\126\002\uffdb\003\uffdb\004" +
    "\076\005\071\006\104\007\101\011\074\012\uffdb\013\072" +
    "\014\uffdb\015\105\016\100\017\102\020\073\021\077\022" +
    "\103\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb" +
    "\052\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\001\002\000\126\002\uffe4\003\uffe4\004\076\005\071" +
    "\006\104\007\101\011\074\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002" +
    "\000\126\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\060\uffe8\061\uffe8\062\uffe8\001\002\000\126\002" +
    "\uffdf\003\uffdf\004\076\005\071\006\104\007\101\011\074" +
    "\012\uffdf\013\uffdf\014\uffdf\015\105\016\100\017\102\020" +
    "\073\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\051\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\001\002\000\126\002\uffe2\003\uffe2" +
    "\004\076\005\071\006\104\007\101\011\074\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2\047\uffe2\051" +
    "\uffe2\052\uffe2\054\uffe2\055\uffe2\056\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\001\002\000\126\002\uffe7\003\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7\001" +
    "\002\000\126\002\uffe3\003\uffe3\004\076\005\071\006\104" +
    "\007\101\011\074\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002\000\126" +
    "\002\uffe0\003\uffe0\004\076\005\071\006\104\007\101\011" +
    "\074\012\uffe0\013\uffe0\014\uffe0\015\105\016\100\017\102" +
    "\020\073\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\051\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\001\002\000\126\002\uffea\003" +
    "\uffea\004\uffea\005\uffea\006\104\007\101\011\074\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046\uffea\047\uffea" +
    "\051\uffea\052\uffea\054\uffea\055\uffea\056\uffea\060\uffea\061" +
    "\uffea\062\uffea\001\002\000\126\002\uffe6\003\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\001\002\000\126\002\uffe1\003\uffe1\004\076\005\071\006" +
    "\104\007\101\011\074\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002\000" +
    "\126\002\uffdc\003\uffdc\004\076\005\071\006\104\007\101" +
    "\011\074\012\uffdc\013\uffdc\014\uffdc\015\105\016\100\017" +
    "\102\020\073\021\077\022\103\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\001\002\000\126\002\uffe9" +
    "\003\uffe9\004\uffe9\005\uffe9\006\104\007\101\011\074\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\051\uffe9\052\uffe9\054\uffe9\055\uffe9\056\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\001\002\000\124\002\uffb8\003\uffb8\004" +
    "\076\005\071\006\104\007\101\011\074\012\uffb8\013\072" +
    "\014\106\015\105\016\100\017\102\020\073\021\077\022" +
    "\103\023\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\045\uffb8\046\uffb8\047\uffb8\052\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8\001" +
    "\002\000\006\025\uffc7\026\130\001\002\000\004\025\127" +
    "\001\002\000\126\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\060\uffc8\061\uffc8\062\uffc8\001\002\000" +
    "\036\003\035\005\015\006\036\007\022\012\020\024\033" +
    "\031\023\033\013\034\012\035\047\036\034\037\050\047" +
    "\065\060\055\001\002\000\124\002\uffb7\003\uffb7\004\076" +
    "\005\071\006\104\007\101\011\074\012\uffb7\013\072\014" +
    "\106\015\105\016\100\017\102\020\073\021\077\022\103" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\045\uffb7\046\uffb7\047\uffb7\052\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002" +
    "\000\004\042\uffb1\001\002\000\064\003\035\005\015\006" +
    "\036\007\022\012\020\023\054\024\033\030\135\031\023" +
    "\033\013\034\012\035\047\036\034\037\050\041\027\045" +
    "\053\046\011\047\046\052\025\054\056\055\044\056\016" +
    "\060\055\061\043\062\032\001\002\000\066\002\ufffe\003" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe\023\ufffe\024\ufffe" +
    "\030\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\041\ufffe\045\ufffe\046\ufffe\047\ufffe\052\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000" +
    "\070\002\uffa3\003\uffa3\005\uffa3\006\uffa3\007\uffa3\012\uffa3" +
    "\023\uffa3\024\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\041\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\001\002\000\004\047\137\001\002\000\004" +
    "\025\140\001\002\000\126\002\uffcc\003\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc\062\uffcc\001" +
    "\002\000\036\003\035\005\015\006\036\007\022\012\020" +
    "\024\033\031\023\033\013\034\012\035\047\036\034\037" +
    "\050\047\065\060\055\001\002\000\036\004\076\005\071" +
    "\006\104\007\101\011\074\013\072\014\106\015\105\016" +
    "\100\017\102\020\073\021\077\022\103\025\143\001\002" +
    "\000\072\002\uffef\003\uffef\005\uffef\006\uffef\007\uffef\012" +
    "\uffef\023\uffef\024\uffef\030\uffef\031\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\144\041\uffef\042\146\045" +
    "\uffef\046\uffef\047\uffef\052\uffef\054\uffef\055\uffef\056\uffef" +
    "\060\uffef\061\uffef\062\uffef\001\002\000\066\002\ufff1\003" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\012\ufff1\023\ufff1\024\ufff1" +
    "\030\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\041\ufff1\045\ufff1\046\ufff1\047\ufff1\052\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000" +
    "\066\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb" +
    "\023\ufffb\024\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\041\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\052\ufffb\054\ufffb\055\ufffb\056\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\001\002\000\066\002\ufff0\003\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\012\ufff0\023\ufff0\024\ufff0\030\ufff0\031\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\041\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\052\ufff0\054\ufff0\055\ufff0\056\ufff0\060" +
    "\ufff0\061\ufff0\062\ufff0\001\002\000\076\002\uffc2\003\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\012\uffc2\023\uffc2\024\uffc2\026" +
    "\151\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\152\052\uffc2\054\uffc2\055\uffc2\056\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\001\002\000\100\002\uffba\003\uffba\005" +
    "\uffba\006\uffba\007\uffba\012\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\052\uffba\054\uffba\055\uffba\056\uffba\060" +
    "\uffba\061\uffba\062\uffba\001\002\000\004\047\154\001\002" +
    "\000\036\003\035\005\015\006\036\007\022\012\020\024" +
    "\033\031\023\033\013\034\012\035\047\036\034\037\050" +
    "\047\065\060\055\001\002\000\074\002\uffc1\003\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\012\uffc1\023\uffc1\024\uffc1\026\130" +
    "\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\052\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\001\002\000\100\002\uffb9\003\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\012\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\030" +
    "\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\052\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\001\002\000\066\002\ufffa\003\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\012\ufffa\023\ufffa\024\ufffa\030\ufffa\031\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\052\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\001\002\000\036\003\035\005" +
    "\015\006\036\007\022\012\020\024\033\031\023\033\013" +
    "\034\012\035\047\036\034\037\050\047\065\060\055\001" +
    "\002\000\074\002\uffbd\003\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\012\uffbd\023\uffbd\024\uffbd\025\uffbd\030\uffbd\031\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\045\uffbd\046\uffbd\047\uffbd\052\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002\000\074" +
    "\002\uffbc\003\uffbc\005\uffbc\006\uffbc\007\uffbc\012\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\001\002\000\036\004\076\005" +
    "\071\006\104\007\101\011\074\013\072\014\106\015\105" +
    "\016\100\017\102\020\073\021\077\022\103\032\162\001" +
    "\002\000\122\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\050\163\052\uffd1\054\uffd1\055\uffd1\056\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\001\002\000\036\003\035\005\015" +
    "\006\036\007\022\012\020\024\033\031\023\033\013\034" +
    "\012\035\047\036\034\037\050\047\065\060\055\001\002" +
    "\000\120\002\uffbb\003\uffbb\004\076\005\071\006\104\007" +
    "\101\011\074\012\uffbb\013\072\014\106\015\105\016\100" +
    "\017\102\020\073\021\077\022\103\023\uffbb\024\uffbb\025" +
    "\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\001\002\000\036\003\035\005\015\006\036\007" +
    "\022\012\020\024\033\031\023\033\013\034\012\035\047" +
    "\036\034\037\050\047\065\060\055\001\002\000\036\004" +
    "\076\005\071\006\104\007\101\011\074\013\072\014\106" +
    "\015\105\016\100\017\102\020\073\021\077\022\103\025" +
    "\167\001\002\000\004\027\060\001\002\000\066\002\uffb2" +
    "\003\uffb2\005\uffb2\006\uffb2\007\uffb2\012\uffb2\023\uffb2\024" +
    "\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\041\uffb2\045\uffb2\046\uffb2\047\uffb2\052\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002" +
    "\000\004\024\172\001\002\000\006\025\uffc9\047\150\001" +
    "\002\000\004\025\175\001\002\000\006\025\uffca\026\151" +
    "\001\002\000\004\027\060\001\002\000\066\002\uffcb\003" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\012\uffcb\023\uffcb\024\uffcb" +
    "\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\041\uffcb\045\uffcb\046\uffcb\047\uffcb\052\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002\000" +
    "\004\002\000\001\002\000\036\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\025\204\001\002\000\034" +
    "\004\076\005\071\006\104\007\101\011\074\013\072\014" +
    "\106\015\105\016\100\017\102\020\073\021\077\022\103" +
    "\001\002\000\036\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\025\203\001\002\000\126\002\uffeb\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\051\uffeb\052\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\001\002\000\126\002\uffdd\003\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\001\002\000\116\002\uffef\003\uffef\004\076\005\071\006" +
    "\104\007\101\011\074\012\uffef\013\072\014\106\015\105" +
    "\016\100\017\102\020\073\021\077\022\103\023\uffef\024" +
    "\uffef\030\uffef\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\144\041\uffef\042\146\045\uffef\046\uffef\047" +
    "\uffef\052\uffef\054\uffef\055\uffef\056\uffef\060\uffef\061\uffef" +
    "\062\uffef\001\002\000\066\002\ufff2\003\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\012\ufff2\023\ufff2\024\ufff2\030\ufff2\031\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\001\002\000\066\002\ufffc\003" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\023\ufffc\024\ufffc" +
    "\030\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037" +
    "\ufffc\041\ufffc\045\ufffc\046\ufffc\047\ufffc\052\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002\000" +
    "\036\003\035\005\015\006\036\007\022\012\020\024\033" +
    "\031\023\033\013\034\012\035\047\036\034\037\050\047" +
    "\065\060\055\001\002\000\076\002\uffbe\003\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\012\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\130\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\001\002\000\036\003\035\005\015\006\036\007" +
    "\022\012\020\024\033\031\023\033\013\034\012\035\047" +
    "\036\034\037\050\047\065\060\055\001\002\000\036\004" +
    "\076\005\071\006\104\007\101\011\074\013\072\014\106" +
    "\015\105\016\100\017\102\020\073\021\077\022\103\025" +
    "\214\001\002\000\004\027\060\001\002\000\070\002\uffb3" +
    "\003\uffb3\005\uffb3\006\uffb3\007\uffb3\012\uffb3\023\uffb3\024" +
    "\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\041\uffb3\045\uffb3\046\uffb3\047\uffb3\052\uffb3\053" +
    "\216\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\001\002\000\006\027\060\052\221\001\002\000\066\002" +
    "\uffb6\003\uffb6\005\uffb6\006\uffb6\007\uffb6\012\uffb6\023\uffb6" +
    "\024\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\041\uffb6\045\uffb6\046\uffb6\047\uffb6\052\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6\062\uffb6\001" +
    "\002\000\066\002\uffb4\003\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\012\uffb4\023\uffb4\024\uffb4\030\uffb4\031\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\001\002\000\004\024\222\001\002\000\036" +
    "\003\035\005\015\006\036\007\022\012\020\024\033\031" +
    "\023\033\013\034\012\035\047\036\034\037\050\047\065" +
    "\060\055\001\002\000\036\004\076\005\071\006\104\007" +
    "\101\011\074\013\072\014\106\015\105\016\100\017\102" +
    "\020\073\021\077\022\103\025\224\001\002\000\004\027" +
    "\060\001\002\000\070\002\uffb3\003\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\012\uffb3\023\uffb3\024\uffb3\030\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\052\uffb3\053\216\054\uffb3\055\uffb3\056" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000\066\002\uffb5" +
    "\003\uffb5\005\uffb5\006\uffb5\007\uffb5\012\uffb5\023\uffb5\024" +
    "\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\041\uffb5\045\uffb5\046\uffb5\047\uffb5\052\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002" +
    "\000\004\032\231\001\002\000\006\026\130\032\uffc4\001" +
    "\002\000\126\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000\066" +
    "\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\012\ufff9\023" +
    "\ufff9\024\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\041\ufff9\045\ufff9\046\ufff9\047\ufff9\052" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\001\002\000\126\002\uffda\003\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\054\uffda" +
    "\055\uffda\056\uffda\060\uffda\061\uffda\062\uffda\001\002\000" +
    "\012\042\uffac\045\053\046\011\047\240\001\002\000\004" +
    "\042\255\001\002\000\004\042\uffad\001\002\000\004\042" +
    "\uffae\001\002\000\016\026\uffba\031\242\043\157\044\160" +
    "\050\uffba\057\241\001\002\000\036\003\035\005\015\006" +
    "\036\007\022\012\020\024\033\031\023\033\013\034\012" +
    "\035\047\036\034\037\050\047\250\060\055\001\002\000" +
    "\036\003\035\005\015\006\036\007\022\012\020\024\033" +
    "\031\023\033\013\034\012\035\047\036\034\037\050\047" +
    "\065\060\055\001\002\000\036\004\076\005\071\006\104" +
    "\007\101\011\074\013\072\014\106\015\105\016\100\017" +
    "\102\020\073\021\077\022\103\032\244\001\002\000\004" +
    "\050\163\001\002\000\004\025\253\001\002\000\036\004" +
    "\076\005\071\006\104\007\101\011\074\013\072\014\106" +
    "\015\105\016\100\017\102\020\073\021\077\022\103\051" +
    "\251\001\002\000\040\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\025\uffa6\051\uffcf\001\002\000\044" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\024\066\025\uffa5\031\067\051\uffd0\001\002\000\036\003" +
    "\035\005\015\006\036\007\022\012\020\024\033\031\023" +
    "\033\013\034\012\035\047\036\034\037\050\047\065\060" +
    "\055\001\002\000\036\004\076\005\071\006\104\007\101" +
    "\011\074\013\072\014\106\015\105\016\100\017\102\020" +
    "\073\021\077\022\103\025\uffa4\001\002\000\004\027\060" +
    "\001\002\000\066\002\uffaf\003\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\012\uffaf\023\uffaf\024\uffaf\030\uffaf\031\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\001\002\000\040\003\035\005\015\006" +
    "\036\007\022\012\020\024\033\031\023\033\013\034\012" +
    "\035\047\036\034\037\050\042\uffaa\047\065\060\055\001" +
    "\002\000\004\042\260\001\002\000\036\004\076\005\071" +
    "\006\104\007\101\011\074\013\072\014\106\015\105\016" +
    "\100\017\102\020\073\021\077\022\103\042\uffab\001\002" +
    "\000\040\003\035\005\015\006\036\007\022\012\020\024" +
    "\033\025\uffa7\031\023\033\013\034\012\035\047\036\034" +
    "\037\050\047\046\060\055\001\002\000\004\025\uffa8\001" +
    "\002\000\004\025\264\001\002\000\036\004\076\005\071" +
    "\006\104\007\101\011\074\013\072\014\106\015\105\016" +
    "\100\017\102\020\073\021\077\022\103\025\uffa9\001\002" +
    "\000\004\027\060\001\002\000\066\002\uffb0\003\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\012\uffb0\023\uffb0\024\uffb0\030\uffb0" +
    "\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\041" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\052\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000\076\002" +
    "\uffbf\003\uffbf\005\uffbf\006\uffbf\007\uffbf\012\uffbf\023\uffbf" +
    "\024\uffbf\026\151\030\uffbf\031\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\267\052\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002\000\036\003\035" +
    "\005\015\006\036\007\022\012\020\024\033\031\023\033" +
    "\013\034\012\035\047\036\034\037\050\047\065\060\055" +
    "\001\002\000\074\002\uffc0\003\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\012\uffc0\023\uffc0\024\uffc0\026\130\030\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\045\uffc0\046\uffc0\047\uffc0\052\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002\000" +
    "\126\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\051\uffe5\052\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\001\002\000\066\002\ufff6" +
    "\003\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\023\ufff6\024" +
    "\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\041\ufff6\045\ufff6\046\ufff6\047\ufff6\052\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\052\002\037\003\040\004\023\006\030\007" +
    "\013\010\007\011\044\012\005\013\050\014\020\015\027" +
    "\020\003\022\051\023\004\024\006\030\025\032\016\035" +
    "\041\036\036\037\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\270\007\013\010\007\011\044\012" +
    "\005\032\016\035\041\037\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\232\007" +
    "\013\010\007\011\044\012\005\032\016\035\041\037\056" +
    "\001\001\000\004\005\231\001\001\000\002\001\001\000" +
    "\026\006\123\007\013\010\007\011\044\012\005\016\227" +
    "\032\016\033\226\035\041\037\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\206\001\001\000\022\006" +
    "\204\007\013\010\007\011\044\012\005\032\016\035\041" +
    "\037\056\001\001\000\022\006\200\007\201\010\177\011" +
    "\044\012\005\032\016\035\041\037\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\133\006\030\007\013" +
    "\010\007\011\044\012\005\013\050\014\020\015\027\020" +
    "\003\022\051\023\004\024\006\030\025\032\016\035\041" +
    "\036\036\037\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\154\001" +
    "\001\000\002\001\001\000\004\015\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\060\001\001\000" +
    "\002\001\001\000\050\003\132\004\023\006\030\007\013" +
    "\010\007\011\044\012\005\013\050\014\020\015\027\020" +
    "\003\022\051\023\004\024\006\030\025\032\016\035\041" +
    "\036\036\037\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\063\007\013\010\007\011\044\012\005" +
    "\032\016\035\041\037\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\123\007\013\010\007\011\044" +
    "\012\005\016\124\032\016\035\041\037\056\040\125\001" +
    "\001\000\022\006\067\007\013\010\007\011\044\012\005" +
    "\032\016\035\041\037\056\001\001\000\002\001\001\000" +
    "\022\006\122\007\013\010\007\011\044\012\005\032\016" +
    "\035\041\037\056\001\001\000\022\006\121\007\013\010" +
    "\007\011\044\012\005\032\016\035\041\037\056\001\001" +
    "\000\022\006\120\007\013\010\007\011\044\012\005\032" +
    "\016\035\041\037\056\001\001\000\022\006\117\007\013" +
    "\010\007\011\044\012\005\032\016\035\041\037\056\001" +
    "\001\000\002\001\001\000\022\006\116\007\013\010\007" +
    "\011\044\012\005\032\016\035\041\037\056\001\001\000" +
    "\022\006\115\007\013\010\007\011\044\012\005\032\016" +
    "\035\041\037\056\001\001\000\022\006\114\007\013\010" +
    "\007\011\044\012\005\032\016\035\041\037\056\001\001" +
    "\000\022\006\113\007\013\010\007\011\044\012\005\032" +
    "\016\035\041\037\056\001\001\000\022\006\112\007\013" +
    "\010\007\011\044\012\005\032\016\035\041\037\056\001" +
    "\001\000\022\006\111\007\013\010\007\011\044\012\005" +
    "\032\016\035\041\037\056\001\001\000\022\006\110\007" +
    "\013\010\007\011\044\012\005\032\016\035\041\037\056" +
    "\001\001\000\022\006\107\007\013\010\007\011\044\012" +
    "\005\032\016\035\041\037\056\001\001\000\022\006\106" +
    "\007\013\010\007\011\044\012\005\032\016\035\041\037" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\130\007\013\010" +
    "\007\011\044\012\005\032\016\035\041\037\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\004\133\006" +
    "\030\007\013\010\007\011\044\012\005\013\050\014\020" +
    "\015\027\020\003\022\051\023\004\024\006\030\025\032" +
    "\016\035\041\036\036\037\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\141\007\013\010\007\011\044" +
    "\012\005\032\016\035\041\037\056\001\001\000\002\001" +
    "\001\000\004\005\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\123\007\013\010\007" +
    "\011\044\012\005\016\152\032\016\035\041\037\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\160\007\013\010\007\011\044\012\005\032" +
    "\016\035\041\037\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\163\007\013\010\007\011\044\012\005\032\016\035\041" +
    "\037\056\001\001\000\002\001\001\000\022\006\165\007" +
    "\013\010\007\011\044\012\005\032\016\035\041\037\056" +
    "\001\001\000\002\001\001\000\004\017\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\173\041\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\123\007\013\010" +
    "\007\011\044\012\005\016\210\032\016\035\041\037\056" +
    "\001\001\000\002\001\001\000\022\006\212\007\013\010" +
    "\007\011\044\012\005\032\016\035\041\037\056\001\001" +
    "\000\002\001\001\000\004\017\214\001\001\000\004\021" +
    "\216\001\001\000\004\017\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\222\007" +
    "\013\010\007\011\044\012\005\032\016\035\041\037\056" +
    "\001\001\000\002\001\001\000\004\017\224\001\001\000" +
    "\004\021\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\236\014\235\015\027\026\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\245\007\013\010\007" +
    "\011\044\012\005\031\244\032\246\035\041\037\056\001" +
    "\001\000\022\006\242\007\013\010\007\011\044\012\005" +
    "\032\016\035\041\037\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\251\007\013\010" +
    "\007\011\044\012\005\032\016\035\041\037\056\001\001" +
    "\000\002\001\001\000\004\017\253\001\001\000\002\001" +
    "\001\000\024\006\256\007\013\010\007\011\044\012\005" +
    "\025\255\032\016\035\041\037\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\262\007\013\010\007" +
    "\011\044\012\005\014\260\015\027\027\261\032\016\035" +
    "\041\037\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\123\007\013\010\007" +
    "\011\044\012\005\016\267\032\016\035\041\037\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/* Método para reportar errores durante la compilación */
	public void report_error(String msg, Object info) {
  		System.out.println(msg);
  		System.exit(0);
	}

	/* Método para reportar errores durante el análisis léxico*/
	public void syntax_error(Symbol cur_token){
		report_error("error léxico", null);
		System.exit(0);
	}
	
	/*	Árbol AST generado con todas las instrucciones del parser */
	List<Instruction> AST;

	public List<Instruction> getAST(){
		return AST;
	}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // block ::= OCC instructions CCC 
            {
              List RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = i;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // array_range_decl ::= expression DP expression 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation v1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation v2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Array(v1, v2); 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_range_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // array_range_decl ::= VAR_NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = n;		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_range_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // array_range_decl ::= array_value 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array a = (Array)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = a;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_range_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_var_act ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_act",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_var_act ::= var_assignment 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_act",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_var_act ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_act",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_conditional_exp ::= 
            {
              Operation RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_conditional_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_conditional_exp ::= expression 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_conditional_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_var_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_var_decl ::= var_assignment 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_var_decl ::= var_declaration 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclaration v = (VarDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_in_ins ::= FOR OB VAR_NAME IN array_range_decl CB block 
            {
              ForInIns RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List ins = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ForInIns(n, a, ins);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_in_ins",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_ins ::= FOR OB for_var_decl PYC for_conditional_exp PYC for_var_act CB block 
            {
              ForIns RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List ins = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ForIns(f, condition, act, ins);		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_ins",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // do_while_ins ::= DO block WHILE OB expression CB 
            {
              DoWhileIns RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List ins = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new DoWhileIns(ins, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_ins",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while_ins ::= WHILE OB expression CB block 
            {
              WhileIns RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List ins = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new WhileIns(e, ins);		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_ins",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else_part ::= 
            {
              List RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_part ::= ELSE block 
            {
              List RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List ins = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List l = new ArrayList<>();
		IfIns i = new IfIns(ins);
		l.add(i);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_part ::= ELSE IF OB expression CB block else_part 
            {
              List RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List ins = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		List <Instruction> l = new ArrayList<>();
		IfIns i = new IfIns(b, ins, e);
		l.add(i);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_ins ::= IF OB expression CB block else_part 
            {
              IfIns RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List ins = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfIns(b, ins, e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_ins",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list_expression ::= list_expression COMMA expression 
            {
              List RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List le = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation exp = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = le;
		RESULT.add(exp);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list_expression ::= expression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation exp = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List l = new ArrayList<>();
		l.add(exp);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lis_var ::= lis_var COMMA VAR_NAME 
            {
              List RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = lv;
		RESULT.add(v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lis_var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lis_var ::= VAR_NAME 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List l = new ArrayList<>();
		l.add(v);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lis_var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_assignment ::= VAR_NAME OK expression CK ASIG expression 
            {
              VarAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation i = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarAssignment(v, i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var_assignment ::= VAR_NAME DEC 
            {
              VarAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
		Operation op = new Operation(v, Global.VARIABLE);
		Operation nVal = new Operation(op, Global.MINUS, new Operation(new Integer(1)));
		List lv = new ArrayList<>(); lv.add(v);
		List le = new ArrayList<>(); le.add(nVal);
		RESULT = new VarAssignment(lv, le);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // var_assignment ::= VAR_NAME INC 
            {
              VarAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
		Operation op = new Operation(v, Global.VARIABLE);
		Operation nVal = new Operation(op, Global.PLUS, new Operation(new Integer(1)));
		List lv = new ArrayList<>(); lv.add(v);
		List le = new ArrayList<>(); le.add(nVal);
		RESULT = new VarAssignment(lv, le);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var_assignment ::= lis_var ASIG list_expression 
            {
              VarAssignment RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarAssignment(lv, e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var_declaration ::= CONST lis_var 
            {
              VarDeclaration RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new VarDeclaration(lv, Global.CONST);		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_declaration ::= CONST lis_var ASIG list_expression 
            {
              VarDeclaration RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDeclaration(lv, Global.CONST, e); 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_declaration ::= VAR lis_var ASIG list_expression 
            {
              VarDeclaration RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDeclaration(lv, Global.VARIA, e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var_declaration ::= VAR lis_var 
            {
              VarDeclaration RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List lv = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDeclaration(lv, Global.VARIA);		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // array_list ::= 
            {
              List RESULT =null;
		 RESULT = new ArrayList<>();	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // array_list ::= list_expression 
            {
              List RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List le = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // array_value ::= OK array_list CK 
            {
              Array RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Array(l);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_value",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arguments ::= 
            {
              List RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arguments ::= list_expression 
            {
              List RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // func_call ::= VAR_NAME OB arguments CB 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new Operation(new FunctionCall(n, l));
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lis_var_arg ::= 
            {
              List RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lis_var_arg",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lis_var_arg ::= lis_var 
            {
              List RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lis_var_arg",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // func_definitions ::= FUNC VAR_NAME OB lis_var_arg CB block 
            {
              Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List b = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Function(n,l, b);		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_definitions",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // predefined_functions ::= LENGTH OB VAR_NAME CB 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Operation(new PredFunction(new Length(e)));		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predefined_functions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= func_call 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= predefined_functions 
            {
              Operation RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation p = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= array_value 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array a = (Array)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= VAR_NAME 
            {
              Operation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(v, Global.VARIABLE);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= VAR_NAME OK expression CK 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Operation(n, e, Global.VARIABLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= FALSE 
            {
              Operation RESULT =null;
			RESULT = new Operation(new Boolean(false));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= TRUE 
            {
              Operation RESULT =null;
		 RESULT = new Operation(new Boolean(true));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= STRING 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation (s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(Integer.parseInt(i));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= DOUBLE 
            {
              Operation RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(Double.parseDouble(d));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unitNumOperator ::= DIV 
            {
              String RESULT =null;
		 parser.report_error("error (/ no es operación unaria)", null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unitNumOperator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unitNumOperator ::= MUL 
            {
              String RESULT =null;
		 parser.report_error("error (* no es operación unaria)", null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unitNumOperator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unitNumOperator ::= MINUS 
            {
              String RESULT =null;
			RESULT = Global.MINUS;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unitNumOperator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean_operation ::= NOT expression 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation (Global.NOT, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_operation ::= expression OR expression 
            {
              Operation RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation b1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(b1, Global.OR, b2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_operation ::= expression AND expression 
            {
              Operation RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation b1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(b1, Global.AND, b2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolean_operation ::= OB boolean_operation CB 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = b;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numerical_operation ::= error 
            {
              Operation RESULT =null;
			parser.syntax_error(null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numerical_operation ::= expression NE expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.NE, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numerical_operation ::= expression EQ expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.EQ, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numerical_operation ::= expression GE expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.GE, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numerical_operation ::= expression GT expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.GT, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numerical_operation ::= expression LE expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.LE, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numerical_operation ::= expression LT expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.LT, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numerical_operation ::= unitNumOperator expression 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(u, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numerical_operation ::= expression MOD expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Operation(n1, Global.MOD, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numerical_operation ::= expression DIV expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.DIV, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numerical_operation ::= expression MUL expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.MUL, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // numerical_operation ::= expression MINUS expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.MINUS, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // numerical_operation ::= expression PLUS expression 
            {
              Operation RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation n1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operation(n1, Global.PLUS, n2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numerical_operation ::= OB numerical_operation CB 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation n = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = n;		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerical_operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= value 
            {
              Operation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= boolean_operation 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = b;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= numerical_operation 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation n = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = n;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // eol ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eol",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // eol ::= PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eol",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // eol ::= EOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eol",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= RETURN expression eol 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation exp = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	RESULT = new Operation(new Return(exp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= func_definitions 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = f;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= for_in_ins 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForInIns f = (ForInIns)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= for_ins 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForIns f = (ForIns)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= do_while_ins PYC 
            {
              Instruction RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoWhileIns d = (DoWhileIns)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= while_ins 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileIns i = (WhileIns)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= if_ins 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfIns i = (IfIns)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= var_assignment eol 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= var_declaration eol 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclaration v = (VarDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= PRINT OB expression CB eol 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Print(e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= expression eol 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
		if (e.is_function_call()){
			RESULT = e;
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= SK_LINE 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> is = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		RESULT = is; RESULT.add(i);	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instruction 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT=new ArrayList<>(); RESULT.add(i);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // in ::= instructions 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		parser.AST = i;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

